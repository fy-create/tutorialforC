---
layout: post
title:  "内存和指针"
categories: c_language
---

## 内存（RAM，Random Access Memory，随机存取存储器）
是计算机中一种非常重要的硬件组件，用来临时存储数据和程序。当你打开一个程序或文件时，计算机会将这个程序或文件的数据从硬盘加载到内存中，这样处理器就可以更快地访问这些数据，从而提高运行速度。

### 内存的几个关键特点：

1. **速度快**：相比硬盘，内存的读写速度要快得多。因此，计算机会将当前正在运行的程序和正在使用的数据加载到内存中，方便处理器快速处理。

2. **易失性**：内存是易失性的存储器，这意味着当计算机关闭或断电时，内存中的数据会丢失。因此，内存通常只用于临时存储，而长期保存的数据则存放在硬盘或SSD中。

3. **容量有限**：虽然内存速度快，但它的容量通常比硬盘小得多。因此，计算机需要有效地管理内存资源，确保当前运行的程序有足够的内存使用。

### 内存的作用：

- **加载和运行程序**：当你打开一个程序时，计算机会将该程序从硬盘加载到内存中，以便处理器快速执行程序的指令。
- **缓存数据**：在运行程序时，计算机会将经常使用的数据保存在内存中，这样可以减少读取硬盘的次数，提高运行效率。

### 内存工作流程示例：

- 你打开了一个文本编辑器，计算机会将这个程序从硬盘加载到内存中。
- 当你编辑一个文档时，文档的内容也会暂时存储在内存中。
- 每当你保存文档时，内存中的数据会被写回硬盘，以便长期保存。
- 当你关闭计算机或程序时，内存中的数据会被清除。

通过理解内存的概念，你可以更好地理解计算机是如何高效地运行程序的，以及为什么在多任务处理时，内存容量会直接影响计算机的性能。

---

## 内存地址

### 内存地址的基本概念
内存地址是计算机中用于标识内存中每个字节位置的唯一编号。内存可以被看作一个巨大的连续存储单元，每个单元都有一个唯一的编号，这个编号就是内存地址。计算机通过这些地址来访问存储在内存中的数据。

### 举例说明
假设内存是一排储物柜，每个储物柜可以存放一个字节的数据，每个储物柜都有一个编号，这个编号就是内存地址。比如，第一个储物柜的地址是0，第二个是1，依此类推。

当程序运行时，数据会存储在这些储物柜里。程序通过内存地址知道数据存储在第几个储物柜，并且可以快速地读取或修改这些数据。

### 指针与内存地址
在编程语言（如C/C++）中，指针是一个变量，它保存的是某个内存单元的地址，而不是直接保存数据本身。通过指针，你可以访问或操作内存中的数据。理解指针和内存地址是理解底层编程的重要一步。

### 总结
内存地址是计算机访问数据的方式。理解内存地址有助于理解程序如何管理和操作数据，尤其是在学习指针、数据结构（如数组、链表）、以及内存管理时，这个概念是基础。

---

## 示例
这里用微软的visual studio 2022演示:  
这是一个简单的小程序输出一个整形变量的值到控制台  
在第6行下一个[调试断点]({{ site.baseurl }}{% post_url 2000-08-08-program-debug %})

![debug_show_memory]({{ site.baseurl }}/assets/images/debug_show_memory.png)

用调试方式启动程序后，程序会停在第6行,从菜单的调试->窗口空可以打开“监视”和”内存“这两个小窗口  
监视窗口可以查看当前上下文的变量的值，这里手动添加了一个 &var, 这个的意思是var这个变量所在的精确的内存地址，所谓地址其实也就是C语言的一个指针，他是一个由4个或8个byte组成的数字，这里就是 0x000000FBAE59FC54，通常表达一个byte都是2个数字，数一数前面的大数字正好是8个byte.  

当今的机器的内存基本都是比较大的，安装的操作系统(OS) 肯定是64位的(8 Byte)，比如说一台电脑的内存大小是16G，换算成byte就是 16(G) * 1024(M) *1024(K) * 1024(B) = 17,179,869,184 = 0x400000000  
这个数字用4个Byte 已经不能表达了，就因为如此后来才出现了64位的OS，这样编制程序的寻址空间就大了很多很多。

所以指针就是一个64位的数字，不管是是int* char* long* 等等，他们都是指针，这个指针本身占用的空间是8个byte. 之所以有各种类型的指针其实是为了程序员方便，看到这个指针就知道这个指针也就是某个地址里面存放的东西是什么，比如char* 那么就知道这个地址放的是一个单个的字符，占有的控件是一个byte，比如int* 就知道这个地址放的是一个int数字，占有4个byte,从这个地址开始数0 1 2 3就是这个int的从低到高的4个byte.  


比如内存1窗口中，手动把0x000000FBAE59FC54帖进去就能看到这个地址对应的内存内容，
0x000000FBAE59FC54 + 0 = 0x78  
0x000000FBAE59FC54 + 1 = 0x56  
0x000000FBAE59FC54 + 2 = 0x34  
0x000000FBAE59FC54 + 3 = 0x12  

- **大端（Big-endian）**: 数据按从高位到低位的顺序存储在内存中。
  - 内存地址：`0x00` -> `0x01` -> `0x02` -> `0x03`
  - 数据：`12` -> `34` -> `56` -> `78`

- **小端（Little-endian）**: 数据按从低位到高位的顺序存储在内存中。
  - 内存地址：`0x00` -> `0x01` -> `0x02` -> `0x03`
  - 数据：`78` -> `56` -> `34` -> `12`

大多数 x86 架构使用小端模式

他跟我们预期的0x12345678是一致的，C语言指针是比较难理解的东西，需要多多理解。  




