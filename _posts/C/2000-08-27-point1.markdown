---
layout: post
title:  "指针示例(int *)"
categories: c_language
---

### 指针的定义、指针的定义与赋初始值、改变指针本身、改变指针指向的内容

我们将通过 `int *` 类型的指针，结合 64 位系统的内存内容，以 `int *` 为例，详细说明**指针的定义**、**指针的定义和赋初始值**、**改变指针本身**和**改变指针指向的内容**这几个方面。

### 1. **指针的定义**

**指针的定义**是创建一个指针变量，它用于存储某种类型的变量的内存地址。定义时并没有给指针赋值。

#### 语法：

```c
int *p;
```

- `int *p;` 定义了一个指向 `int` 类型变量的指针 `p`，但此时指针 `p` 并没有指向任何具体的地址，因此它的值是**未定义的**，可能是一个**野指针**。

#### 内存布局（假设在 64 位系统上，指针占用 8 个byte，int 类型变量占用 4 个byte）：

假设 `p` 的内存地址为 `0x3000`，指针还没有被赋值。

| 地址          | 内容    | 说明                   |
|---------------|---------|------------------------|
| `0x3007`      | 未定义  | 指针 `p` 的高位        |
| `0x3006`      | 未定义  |                        |
| `0x3005`      | 未定义  |                        |
| `0x3004`      | 未定义  |                        |
| `0x3003`      | 未定义  |                        |
| `0x3002`      | 未定义  |                        |
| `0x3001`      | 未定义  |                        |
| `0x3000`      | 未定义  | 指针 `p` 的低位        |

### 2. **指针的定义和赋初始值**

定义指针的同时，将一个有效的地址赋给它，这样指针将指向某个有效的内存地址，避免成为野指针。

#### 语法：

```c
int *p = &a;
/**
 * 这里 *p = &a; 其实是干了两件事   
 * 1. 定义一个指针变量 int *p; 也可以写成int* p;这样更容易理解，就是一个指向int的指针
 * 2. 给指针赋初值 p = &a;
 */
```

这里指针 `p` 在定义时就被赋值，指向变量 `a` 的地址。

#### 示例：

```c
int a = 10;
int *p = &a;  // 定义指针 p，并将 a 的地址赋给 p
```

假设 `a` 的内存地址是 `0x1000`，指针 `p` 的内存地址是 `0x3000`。此时，指针 `p` 被初始化为 `a` 的地址 `0x1000`。

#### 内存布局：

| 地址          | 内容        | 说明                           |
|---------------|-------------|--------------------------------|
| `0x3007`      | `00`        | 指针 `p` 的高位                |
| `0x3006`      | `00`        |                                |
| `0x3005`      | `00`        |                                |
| `0x3004`      | `00`        |                                |
| `0x3003`      | `00`        |                                |
| `0x3002`      | `00`        |                                |
| `0x3001`      | `10`        | 指针 `p` 指向 `a` 的地址高位   |
| `0x3000`      | `00`        | 指针 `p` 指向 `a` 的地址低位   |
|               |             |                                |
| `0x1003`      | `00`        | 变量 `a` 的高位                |
| `0x1002`      | `00`        |                                |
| `0x1001`      | `00`        |                                |
| `0x1000`      | `0A`        | 变量 `a` 的值 `10`             |

此时，指针 `p` 存储了 `a` 的内存地址 `0x1000`，表示 `p` 指向 `a`。

### 3. **改变指针本身**

**改变指针本身**是指将指针指向另一个变量或内存地址，改变它存储的地址值。

#### 语法：

```c
p = &b;
//&b是一个地址,也就是一个8个byte构成的整数，p这个变量也是占用8个byte的空间，这就一个标准的赋值语句。
```

这里，`p` 之前指向 `a`，现在通过 `p = &b;` 改变了它的指向，让它指向变量 `b` 的地址。

#### 示例：

```c
int b = 20;
p = &b;  // 改变指针 p，使其指向变量 b
```

假设 `b` 的内存地址为 `0x2000`，执行 `p = &b;` 之后，指针 `p` 将指向 `b`，即 `p` 的值变为 `0x2000`。

#### 改变后的内存布局：

| 地址          | 内容        | 说明                           |
|---------------|-------------|--------------------------------|
| `0x3007`      | `00`        | 指针 `p` 的高位                |
| `0x3006`      | `00`        |                                |
| `0x3005`      | `00`        |                                |
| `0x3004`      | `00`        |                                |
| `0x3003`      | `00`        |                                |
| `0x3002`      | `00`        |                                |
| `0x3001`      | `20`        | 指针 `p` 指向 `b` 的地址高位   |
| `0x3000`      | `00`        | 指针 `p` 指向 `b` 的地址低位   |
|               |             |                                |
| `0x2003`      | `00`        | 变量 `b` 的高位                |
| `0x2002`      | `00`        |                                |
| `0x2001`      | `00`        |                                |
| `0x2000`      | `14`        | 变量 `b` 的值 `20`             |
| `0x1003`      | `00`        | 变量 `a` 的高位                |
| `0x1002`      | `00`        |                                |
| `0x1001`      | `00`        |                                |
| `0x1000`      | `0A`        | 变量 `a` 的值 `10`             |

- `p` 的值被改变为 `b` 的地址 `0x2000`，所以 `p` 现在指向 `b`。
- `a` 的值保持不变，仍然为 `10`。
- `b` 的值为 `20`，存储在地址 `0x2000`。

### 4. **改变指针指向的内容**

**改变指针指向的内容**是通过指针修改它指向的变量的值，解引用操作符 `*` 用来访问指针指向的变量的值。这里一定要跟指针的定义区分开,千万不能混淆。

#### 语法：

```c
*p = new_value;
```

通过 `*p = 30;`，我们可以修改 `p` 指向的变量的值。

#### 示例：

```c
*p = 30;  // 通过指针修改 b 的值为 30
```

在这个例子中，`p` 指向 `b`，通过 `*p = 30;` 修改 `b` 的值。  

深入理解一点就是:  
**p是`int*`指针变量， p这个变量本身的首地址是0x3000,从这开始的8个byte构成了一个整数:0x0000000000002000，也就是一个地址.**  

**根据p的定义,我们知道从0x0000000000002000这个地址开始存放的是一个int,也就是4个byte构成的整数.**  

**现在我们在这个地址开始写入 `30(0x0000001E)` 这个数字，这就完成了改变指针指向的内容这个操作 .**  


#### 改变后的内存布局：

| 地址          | 内容        | 说明                           |
|---------------|-------------|--------------------------------|
| `0x3007`      | `00`        | 指针 `p` 的高位                |
| `0x3006`      | `00`        |                                |
| `0x3005`      | `00`        |                                |
| `0x3004`      | `00`        |                                |
| `0x3003`      | `00`        |                                |
| `0x3002`      | `00`        |                                |
| `0x3001`      | `20`        | 指针 `p` 指向 `b` 的地址高位   |
| `0x3000`      | `00`        | 指针 `p` 指向 `b` 的地址低位   |
|               |             |                                |
| `0x2003`      | `00`        | 变量 `b` 的高位                |
| `0x2002`      | `00`        |                                |
| `0x2001`      | `00`        |                                |
| `0x2000`      | `1E`        | 变量 `b` 的值变为 `30`         |
| `0x1003`      | `00`        | 变量 `a` 的高位                |
| `0x1002`      | `00`        |                                |
| `0x1001`      | `00`        |                                |
| `0x1000`      | `0A`        | 变量 `a` 的值 `10`             |

- 指针 `p` 仍然指向 `b` 的地址 `0x2000`，但通过 `*p = 30;`，`b` 的值被修改为 `30`。

### 5. **总结**

1. **指针的定义**：指针只是定义了一个用于存储内存地址的变量，指针变量本身还没有初始化。
   
   ```c
   int *p;
   ```

   - 指针被定义，但未赋值，指针 `p` 指向一个不确定的内存地址，可能是野指针。

2. **指针的定义和赋初始值**：在定义指针的同时，将一个变量的地址赋值给它，使得指针指向一个有效的地址。

   ```c
   int *p = &a;
   ```

   - 指针 `p` 在定义时被初始化为指向变量 `a`。

3. **改变指针本身**：将指针从一个变量的地址改变为另一个变量的地址，即改变它的指向。

   ```c
   p = &b;
   ```

   - 指针 `p` 从指向 `a` 改变为指向 `b`，但 `a` 和 `b` 的值并没有改变。

4. **改变指针指向的内容**：通过指针修改它指向的变量的值，指针本身指向的地址不变，但该地址中的内容发生了改变。

   ```c
   *p = 30;
   ```

   - 通过 `*p` 修改 `p` 指向的变量的值。

理解指针的定义、指针的初始赋值、改变指针本身和改变指针指向的内容，对于正确使用 C 语言中的指针至关重要。