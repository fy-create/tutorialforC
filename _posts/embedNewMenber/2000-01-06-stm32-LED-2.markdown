---
layout: post
title:  "寄存器的相关概念"
categories: embed1
---

在 STM32 微控制器中，**寄存器**是处理器和外设（如 GPIO、USART、TIM 等）之间交互的桥梁。通过寄存器，处理器可以配置外设的工作模式、控制外设的操作，并读取外设的状态。理解寄存器的工作原理以及寄存器写入后如何触发后续操作，是开发 STM32 应用程序的基础。

### **STM32 寄存器详细解释**

#### **1. 什么是寄存器？**
寄存器是微控制器中的一种特殊内存单元，通常是 32 位或 16 位宽度。每个寄存器有一个固定的内存地址，处理器可以通过地址访问寄存器，进行读或写操作。STM32 的外设，如 GPIO、USART、TIM 定时器等，都有一组寄存器与之关联，这些寄存器控制着外设的行为。

#### **2. 寄存器的分类**
寄存器根据其用途和功能，可以分为以下几类：

- **控制寄存器（Control Registers）**：控制外设的功能。例如，启动或停止外设，选择工作模式等。
- **状态寄存器（Status Registers）**：显示外设的当前状态，如定时器是否已经溢出、串口是否接收到数据等。
- **数据寄存器（Data Registers）**：用于传输数据，如 GPIO 的输入输出数据寄存器，USART 的接收和发送数据寄存器等。

#### **3. 寄存器的工作原理**
- **每个寄存器都有一个固定的地址**，程序通过该地址访问寄存器。
- 当处理器向寄存器写入一个值时，这个值直接影响外设的行为或配置。例如，往 GPIO 配置寄存器写入值可以改变 GPIO 引脚的模式（输入、输出等）。

#### **4. 处理器与寄存器交互的基本流程**
1. **处理器通过地址总线指定寄存器地址**，表明它想要与哪个寄存器交互。
2. **处理器通过数据总线向寄存器写入数据**，寄存器根据写入的数据修改外设的行为或状态。
3. **外设根据寄存器的值**采取相应的操作，如开始计数、设置引脚电平、传输数据等。

### **寄存器写入后如何触发后续工作**

写入寄存器后，处理器和外设是如何进行后续操作的？这个过程依赖于外设和寄存器的紧密集成。写入寄存器后，硬件立即响应寄存器的变化，触发相应的操作。

#### **1. 配置寄存器后外设立即生效**
在 STM32 中，许多寄存器的写入会立即触发硬件行为。例如：

- **GPIO 输出控制寄存器**：当往 `GPIOx_BSRR` 寄存器写入数据时，GPIO 引脚的电平会立即改变。
  
  **示例：**
  ```c
  GPIOC->BSRR = (1 << 13);  // 将 PC13 置为高电平
  ```
  - 这里，写入 `GPIOC_BSRR` 寄存器会立即改变 **PC13 引脚**的电平状态，因为 `BSRR` 寄存器直接控制 GPIO 引脚的电平。

- **定时器启动**：往定时器控制寄存器写入启动位时，定时器会立即开始计数。

  **示例：**
  ```c
  TIM2->CR1 |= TIM_CR1_CEN;  // 启动定时器2
  ```
  - 这行代码写入 `TIM2_CR1` 的 `CEN` 位，启动定时器。定时器硬件会开始计数，并根据设定的频率进行递增或递减。

#### **2. 通过中断机制触发后续工作**
某些外设在寄存器发生变化后，不会立即触发处理器的响应，而是通过 **中断机制** 来通知处理器。例如，USART 发送或接收完成后，会设置一个中断标志，通知处理器该操作已经完成。

- **USART 数据传输**：当处理器往 `USARTx_DR` 寄存器写入数据时，USART 外设会自动开始数据传输。当数据传输完成时，USART 会通过设置 `TC`（Transmission Complete）位或触发中断，通知处理器传输完成。

  **示例：**
  ```c
  USART1->DR = data;  // 向 USART 数据寄存器写入数据
  while (!(USART1->SR & USART_SR_TC));  // 等待传输完成
  ```
  - 在这里，写入 `USART1_DR` 后，USART 外设会自动开始传输，直到 `USART_SR` 中的 `TC` 位被设置为 1，表示传输完成。

#### **3. 定时器和计数器工作原理**
定时器寄存器配置完成后，定时器会在硬件电路中按照设定的时钟频率和模式开始计数。计数达到设定值时，定时器可以通过中断通知处理器，或者改变状态寄存器中的某些位。

- **定时器溢出中断**：配置定时器后，处理器可以等待定时器溢出，定时器会在溢出时触发中断。

  **示例：**
  ```c
  TIM2->DIER |= TIM_DIER_UIE;  // 使能更新中断
  TIM2->CR1 |= TIM_CR1_CEN;    // 启动定时器
  // 当定时器溢出时会触发中断
  ```

#### **4. DMA 的协作**
DMA（直接存储器访问）是一种在处理器之外的自动数据传输机制。处理器通过向 DMA 控制寄存器写入配置，启动 DMA 传输，然后外设和内存之间的数据传输完全由 DMA 负责，无需处理器干预。

- **DMA 数据传输**：当处理器配置完 DMA 寄存器后，DMA 模块会自动从外设（如 ADC、USART）或内存传输数据，直到传输完成。DMA 可以在完成传输后触发中断通知处理器。

  **示例：**
  ```c
  DMA1_Channel1->CCR |= DMA_CCR_EN;  // 启动 DMA1 通道1 传输
  // DMA 开始传输数据，处理器不再介入
  ```

#### **5. 外设状态寄存器反馈**
写入某些外设寄存器后，处理器会通过读取 **状态寄存器（Status Register）** 来确认操作是否完成。例如，USART 的状态寄存器包含发送缓冲区空标志（TXE）和传输完成标志（TC）。当这些标志位被设置时，处理器知道数据已经发送完成，可以继续下一个操作。

- **轮询方式**：在这种情况下，处理器通过不断读取状态寄存器的特定位来判断外设是否完成操作。

  **示例：**
  ```c
  while (!(USART1->SR & USART_SR_TXE));  // 轮询等待发送缓冲区空闲
  USART1->DR = data;  // 写入数据开始传输
  ```

### **寄存器写入后触发机制总结**

1. **寄存器的值与硬件直接关联**：STM32 的外设寄存器直接连接到硬件，处理器写入寄存器时，硬件立即根据寄存器的值进行操作。
2. **硬件行为的直接触发**：写入寄存器后，外设可能会立即响应，改变其状态或行为。例如，GPIO 的输出电平变化，定时器的启动，USART 的数据发送等。
3. **中断机制**：某些外设通过中断机制通知处理器，如 DMA 传输完成、USART 数据接收完成等。处理器配置寄存器后，外设完成任务时会触发中断，处理器可以在中断服务程序中进行后续处理。
4. **轮询与状态寄存器**：处理器可以通过不断读取外设的状态寄存器来监控外设的工作状态，并在条件满足时执行下一步操作。

### **实际示例：GPIO 和 USART 的寄存器工作流程**

#### **GPIO 引脚控制**

1. **配置 GPIO 引脚模式（输出模式）**：
   ```c
   RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;  // 使能 GPIOC 时钟
   GPIOC->CRH &= ~(0xF << 20);          // 清除 PC13 引脚的配置
   GPIOC->CRH |= (0x2 << 20);           // 设置 PC13 为 2 MHz 推挽输出模式
   ```

2. **写入 `GPIOC_BSRR` 寄存器，控制引脚电平**：
   ```c
   GPIOC->BSRR = (1 << 13);  // 将 PC13 置为高电平
   GPIOC->BSRR = (1 << (13 + 16));  // 将 PC13 置为低电平
   ```

#### **USART 数据发送**

1. **配置 USART**：
   ```c
   RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // 使能 USART1 时钟
   USART1->BRR = 0x1D4C;                  // 设置波特率
   USART1->CR1 |= USART_CR1_TE | USART_CR1_UE;  // 启用发送和 USART
   ```

2. **向 `USART1_DR` 写入数据**：
   ```c
   while (!(USART1->SR & USART_SR_TXE));  // 等待发送缓冲区空闲
   USART1->DR = data;  // 向数据寄存器写入数据，开始发送
   ```

### **总结**

在 STM32 微控制器中，寄存器是控制外设的关键。处理器通过向寄存器写入特定的值，能够配置和控制各种外设。寄存器的写入操作会触发外设立即执行某些操作，或设置状态寄存器的标志位，或通过中断通知处理器。这种机制使得处理器和外设能够高效协作，实现复杂的嵌入式系统功能。