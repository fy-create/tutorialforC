---
layout: post
title:  "寄存器和内存映射"
categories: embed1
---

### 1. **什么是寄存器和内存映射？**

- **寄存器**：寄存器是微控制器中的特殊内存单元，用于控制硬件外设的行为。例如，RCC（Reset and Clock Control，复位和时钟控制）外设通过其寄存器控制各个外设模块（如 GPIO、USART、ADC 等）的时钟是否开启。
  
- **内存映射**：STM32 微控制器将每个外设（如 RCC、GPIO、USART 等）的寄存器映射到特定的内存地址范围，这意味着寄存器的访问可以像访问内存一样进行。例如，RCC 的基地址是 `0x40021000`，该地址是固定的，可以通过访问这块内存区域来操作 RCC 外设。

### 2. **代码解析**
```c
RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
```

这段代码是用来打开 GPIOC 外设的时钟。在 STM32 中，所有外设的时钟控制都是通过 RCC 外设的寄存器进行的。具体来说，`RCC->APB2ENR` 这个寄存器用于控制 APB2 总线上外设的时钟使能。

- `RCC->APB2ENR`：RCC 的 APB2 外设时钟使能寄存器。
- `RCC_APB2ENR_IOPCEN`：这是一个宏，通常定义为某个位（如 `(1 << 4)`），表示 GPIOC 外设时钟使能位。

这段代码的作用是将 `APB2ENR` 寄存器的 IOPCEN 位（控制 GPIOC 时钟的使能位）设置为 1，打开 GPIOC 的时钟。

### 3. **RCC 寄存器和内存映射**

#### 1. **寄存器地址的内存映射**
RCC 是 STM32 的一个外设，它的寄存器地址是在芯片设计阶段由芯片制造商 STMicroelectronics 确定的。在 STM32F103C8T6 中，RCC 的寄存器基地址为 `0x40021000`。

- **RCC 基地址**：`0x40021000`
  
RCC 的寄存器在这个地址的基础上有不同的偏移量。例如：
- **APB2ENR** 寄存器（用于控制 APB2 总线上的外设时钟）在 RCC 寄存器地址空间中的偏移量为 `0x18`，所以 `APB2ENR` 寄存器的地址是 `0x40021000 + 0x18 = 0x40021018`。

#### 2. **寄存器定义**
STM32 的头文件中通常会为这些寄存器和位定义宏。例如：

- `#define RCC_APB2ENR_IOPCEN (1 << 4)`：定义了 `APB2ENR` 寄存器的第 4 位，即 IOPCEN（GPIOC 外设时钟使能位）。
- `#define RCC ((RCC_TypeDef *) 0x40021000)`：定义了 RCC 基地址为 `0x40021000`，并通过结构体的方式将该地址映射为一个寄存器组。

因此，`RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;` 实际上是在访问 `0x40021018` 这个地址的内存，并将它的第 4 位设置为 1，启用 GPIOC 的时钟。

### 4. **寄存器地址在什么阶段决定的？**

寄存器地址是在微控制器的**硬件设计阶段**由芯片制造商决定的。这一阶段的具体步骤如下：

#### 1. **芯片架构设计**
在芯片设计的最初阶段，硬件设计师需要为微控制器的每个外设（如 GPIO、RCC、USART 等）分配内存地址空间。对于 STM32F103 系列微控制器，设计者会依据 ARM Cortex-M3 处理器的内存映射模型，在微控制器的内存空间中划分一部分给外设寄存器。例如，STM32F103 的外设寄存器通常从 `0x40000000` 开始，这部分空间用于映射外设的控制寄存器。

#### 2. **寄存器地址分配**
硬件设计师在设计时，会为每个外设分配特定的内存地址范围。例如：
- RCC 的基地址为 `0x40021000`
- GPIOC 的基地址为 `0x40011000`

在设计过程中，每个寄存器的偏移量和地址都会被固定下来。例如：
- RCC 的 `APB2ENR` 寄存器偏移量是 `0x18`，对应的内存地址是 `0x40021018`。

这些地址信息在设计芯片时就已经确定下来，之后不会改变。芯片制造完成后，微控制器内部的这些寄存器就固定在这些地址处。

#### 3. **开发者访问寄存器**
在开发阶段，程序员通过头文件和库函数（例如 `RCC->APB2ENR` 这种结构体映射方式）访问这些固定的寄存器地址。虽然程序员看到的是友好的寄存器名称和字段，但实际上，编译器会将这些名称映射到具体的内存地址。例如 `RCC->APB2ENR` 会被映射为访问 `0x40021018` 这个内存地址。

### 5. **为什么不需要 malloc？**

寄存器的内存地址是在硬件中固化的，并且分配在处理器的特殊内存区域中，这与堆区的动态内存分配不同。由于寄存器的地址和大小都是固定的，程序不需要通过 `malloc` 或其他动态内存分配函数来为这些寄存器分配空间。

### 6. **总结**

- 寄存器地址是在芯片的**硬件设计阶段**由设计者确定的，通常映射在 ARM Cortex-M 的内存空间中。
- `RCC->APB2ENR` 代表的是一个固定的寄存器地址，通过内存映射直接访问。
- STM32 的外设寄存器基地址和偏移量是通过内存映射的方式固化在硬件中，程序员可以通过直接访问这些地址来控制外设。

`RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;` 这行代码实际上是在对内存地址 `0x40021018`（APB2ENR 寄存器）进行位操作，启用 GPIOC 外设的时钟。