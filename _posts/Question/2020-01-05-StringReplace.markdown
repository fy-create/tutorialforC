---
layout: post
title:  "字符替换"
categories: question
---

<script src="https://cdnjs.cloudflare.com/ajax/libs/core-js/3.6.5/minified.js"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

---

#### 输⼊⼀个字符串S，将S中出现的O(⼤写字⺟O)替换为P(⼤写字⺟P)后重新输出字符串。
要求：不使⽤C语⾔字符串库 

输⼊格式：字符串  
输出格式：替换元素后的字符串  
数据范围：0 < len(S) ≤ 1000  

--- 
<BR>

为了完成这个任务，我们需要在不使用 C 语言的字符串库的情况下操作字符串。C 语言中的字符串本质上是一个字符数组，因此我们可以直接操作数组中的字符进行替换。

### 思路：
1. 读取输入的字符串，并逐字符遍历。
2. 如果字符为大写字母 `O`，将其替换为 `P`。
3. 直接修改数组中的字符，遍历结束后输出修改后的字符串。

### 实现步骤：
- 使用一个字符数组来存储输入的字符串。
- 遍历字符串，检查每个字符是否为 `O`。
- 如果遇到 `O`，将其替换为 `P`。
- 最后输出修改后的字符串。

### C 语言代码实现：

```c
#include <stdio.h>

int main() {
    char S[1001];  // 字符串长度最大为1000，加1用于存储结束符
    printf("请输入字符串: ");
    
    // 读取输入字符串
    scanf("%1000s", S);  // 使用 %1000s 保证不溢出
    
    // 遍历字符串，替换 'O' 为 'P'
    for (int i = 0; S[i] != '\0'; i++) {
        if (S[i] == 'O') {
            S[i] = 'P';  // 替换 O 为 P
        }
    }
    
    // 输出替换后的字符串
    printf("替换后的字符串为: %s\n", S);
    
    return 0;
}
```

### 代码说明：
1. **`char S[1001]`**：定义一个字符数组，大小为 1001，用于存储最多 1000 个字符的字符串（最后一位存放字符串的终止符 `\0`）。
2. **`scanf("%1000s", S)`**：读取最多 1000 个字符，防止输入过长导致溢出。
3. **替换操作**：通过 `for` 循环遍历字符串，每当遇到字符 `O`，将其替换为 `P`。
4. **输出**：最后输出修改后的字符串。

### 示例：
输入：
```
HELLO~WORLD
```

输出：
```
替换后的字符串为: HELLP~WORLD
```

### 解释：
输入的字符串 `HELLO WORLD` 中，`O` 被替换为 `P`，得到输出字符串 `HELLP WORLD`。

### 数据范围与性能：
该程序处理字符串长度为 0 到 1000 的情况，使用一个简单的遍历操作，时间复杂度为 \(O(n)\)，其中 \(n\) 是字符串的长度，最大为 1000。在这样的数据范围内，该算法能够高效运行。

---

<BR><BR><BR>



## 为符合题意，改写如下：

将替换逻辑写成函数 `void puts_replace(char *s)` 后，可以将代码结构分离，使主函数更简洁。`puts_replace` 函数负责处理字符串中的字符替换，而主函数只负责读取和输出字符串。

### 修改后的代码如下：

```c
#include <stdio.h>

// 替换字符串中的 'O' 为 'P'
void puts_replace(char *s) {
    for (int i = 0; s[i] != '\0'; i++) {
        if (s[i] == 'O') {
            s[i] = 'P';  // 将 O 替换为 P
        }
    }
}

char S[1001] = {0};  // 字符串长度最大为1000，加1用于存储结束符,初始化为0是一个好习惯。

int main() {
    scanf("%s", S); // 输⼊时，⽤~代替空格,因为在控制台输入空格，会被解释为输入到下一个变量，此处又没有地方接收新的变量，可能会引发异常。
    puts_replace(S);

    // 输出替换后的字符串
    printf("替换后的字符串为: %s\n", S);
    
    return 0;
}
```

### 代码说明：

1. **`void puts_replace(char *s)`**：
   - 该函数接收一个字符串 `s`，通过指针逐字符遍历字符串。
   - 如果字符为 `O`，则将其替换为 `P`。
   - 因为 `s` 是指向字符串的指针，直接对 `s[i]` 的修改会作用于原字符串。

2. **主函数 `main()`**：
   - 读取输入字符串 `S`，最大长度为 1000。
   - 调用 `puts_replace(S)` 对字符串进行替换。
   - 输出替换后的字符串。

### 示例：

输入：
```
HELLO~WORLD
```

输出：
```
替换后的字符串为: HELLP~WORLD
```

### 函数的优势：

- **代码结构清晰**：将替换逻辑封装到 `puts_replace` 函数中，主函数变得简洁易读，便于复用和维护。
- **灵活性**：可以轻松地将替换功能应用于不同的字符串操作中。