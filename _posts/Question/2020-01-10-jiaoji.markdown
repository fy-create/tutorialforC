---
layout: post
title:  "求两个集合的交集"
categories: question
---

---

#### 给定两个⽆重复元素的⽆序的正整数集合A和B，求这两个集合的交集并输出。交集仍是⽆序的且不考虑交集为空。

输⼊格式：  
第⼀⾏是⽤空格隔开的集合A的元素。最后⼀个值-1表⽰输⼊结束。注：-1不是集合的元素。  
第⼆⾏是⽤空格隔开的集合B的元素。最后⼀个值-1表⽰输⼊结束。注：-1不是集合的元素。  

输出格式：输出在⼀⾏的、⽤空格隔开的A和B交集的元素。  
数据范围：0 ＜ 输⼊值的个数 ≤ 20  

--- 

<BR>

为了求两个无重复元素的无序正整数集合 A 和 B 的交集，我们可以使用如下步骤：

1. **读入集合 A 和 B 的元素**：由于每一行的输入以 `-1` 结尾，我们可以逐个读取元素，直到遇到 `-1`，表示结束。
2. **找交集**：对于每个集合 A 中的元素，检查它是否存在于集合 B 中。如果存在，则将其加入交集结果。
3. **输出交集**：在一行中输出所有交集元素，使用空格分隔。

### 实现思路：
- **数组模拟集合**：我们可以使用数组来存储两个集合 A 和 B。
- **遍历检查交集**：对 A 中的每个元素，检查是否在 B 中出现，若出现，则将其作为交集元素输出。


### 任务：
- **`intersect(A, B, C)` 函数**：这个函数需要遍历集合 A，对于 A 中的每一个元素，检查它是否在集合 B 中存在。如果存在，就将该元素加入集合 C。

### 完整代码：

```c
#include <stdio.h>

#define MAX 20  // 集合最大元素个数

// 集合输入函数
void input_set(int *S) {
    int i = 0, v;
    do {
        scanf("%d", &v);
        S[i++] = v;
    } while (v != -1);
    S[i - 1] = -1;  // 保证输入的集合以 -1 结尾
}

// 检查一个值是否在集合B中
int is_in_set(int *B, int value) {
    for (int i = 0; B[i] != -1; ++i) {
        if (B[i] == value) {
            return 1;  // 找到元素，返回1
        }
    }
    return 0;  // 没找到，返回0
}

// 计算集合A和B的交集，并将结果存入C
void intersect(int *A, int *B, int *C) {
    int k = 0;
    for (int i = 0; A[i] != -1; ++i) {
        if (is_in_set(B, A[i])) {
            C[k++] = A[i];  // 将交集元素加入C
        }
    }
    C[k] = -1;  // 用 -1 标记C的结束
}

int main() {
    int A[MAX] = {0}, B[MAX] = { 0 }, C[MAX] = { 0 }; //数组最好要初始化
    
    printf("请输入集合A的元素（以-1结束）：\n");
    input_set(A);
    
    printf("请输入集合B的元素（以-1结束）：\n");
    input_set(B);
    
    intersect(A, B, C);
    
    printf("集合A和B的交集为：");
    for (int i = 0; C[i] != -1; ++i) {
        printf("%d ", C[i]);
    }
    printf("\n");
    
    return 0;
}
```

### 代码说明：
1. **`input_set` 函数**：
   - 读取用户输入的集合元素，直到遇到 `-1` 表示输入结束。
   - 将输入的元素存储到数组中，最后确保 `-1` 作为集合的结束标记。

2. **`is_in_set` 函数**：
   - 该函数用于检查某个元素是否在集合 B 中。如果找到该元素，则返回 `1`，否则返回 `0`。

3. **`intersect` 函数**：
   - 遍历集合 A，对于每个元素，检查它是否在集合 B 中存在。如果存在，就将它添加到集合 C 中。
   - 最后在 C 集合中添加 `-1` 作为结束标记。

4. **主函数 `main`**：
   - 输入集合 A 和 B。
   - 调用 `intersect` 函数计算交集并存储在 C 中。
   - 输出集合 C。

### 输入示例：
```
请输入集合A的元素（以-1结束）：
1 3 5 7 -1
请输入集合B的元素（以-1结束）：
2 3 6 7 -1
```

### 输出示例：
```
集合A和B的交集为：3 7 
```

### 代码的关键点：
- 交集集合 `C` 使用 `-1` 作为结束标记，确保在输出时能知道何时停止。
- 遍历集合 A 并检查其元素是否在 B 中，从而计算交集。

这个程序能够正确计算并输出两个集合的交集，同时确保集合的输入格式遵守以 `-1` 结束的规则。