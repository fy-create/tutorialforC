---
layout: post
title:  "数组"
categories: jekyll update
---

在 C 语言中，数组是一种非常重要的数据结构，它用于存储相同数据类型的多个元素。数组具有固定的长度，并且数组元素在内存中是连续存储的。

### 1. **数组的定义**

在 C 语言中，数组可以使用以下语法进行定义：

```c
type arrayName[arraySize];
```

- `type`：数组中存储元素的数据类型（如 `int`、`float`、`char` 等）。
- `arrayName`：数组的名称。
- `arraySize`：数组的大小，表示数组可以存储的元素个数。

#### 示例：

```c
int numbers[5];   // 定义一个可以存储 5 个整数的数组
char name[10];    // 定义一个可以存储 10 个字符的数组
```

### 2. **数组的初始化**

数组可以在定义时进行初始化。初始化时，可以通过指定数组的初始值来填充数组。

#### 示例：

```c
int numbers[5] = {1, 2, 3, 4, 5};  // 定义并初始化一个包含 5 个元素的数组
```

- 如果初始化的元素个数少于数组大小，剩余的元素会自动初始化为 `0`。
  
```c
int numbers[5] = {1, 2};  // 剩余元素自动初始化为 0
```

- 你也可以省略数组的大小，让编译器根据初始化列表自动推断数组的大小。

```c
int numbers[] = {1, 2, 3};  // 数组大小为 3
```

### 3. **访问数组元素**

数组中的每个元素都有一个下标（索引）， `下标从 0 开始`。可以通过下标访问和修改数组中的元素。

#### 示例：

```c
int numbers[5] = {1, 2, 3, 4, 5};
printf("%d\n", numbers[0]);  // 输出第一个元素，即 1

numbers[2] = 10;  // 修改第三个元素的值为 10
```

### 4. **数组的遍历**

可以使用循环来遍历数组的所有元素。

#### 示例：

```c
int numbers[5] = {1, 2, 3, 4, 5};

for (int i = 0; i < 5; i++) {
    printf("%d ", numbers[i]);  // 输出数组中的每个元素
}
```

### 5. **字符数组（字符串）**

在 C 语言中，字符数组可以用来存储字符串。C 中的字符串是以 `'\0'` 结尾的字符数组。
'\0'（即空字符，表示[ASCII](https://baike.baidu.com/item/ASCII/309296?fr=ge_ala)码值为 0）

#### 示例：

```c
char name[6] = {'H', 'e', 'l', 'l', 'o', '\0'};  // 定义一个存储字符串的字符数组
// 或者使用字符串字面量
char name[] = "Hello";  // 字符串自动以 '\0' 结尾
```

- 可以通过 `printf` 函数打印字符串：

```c
printf("%s\n", name);  // 输出字符串 "Hello"
```

### 6. **多维数组**

C 语言还支持多维数组，最常见的是二维数组。二维数组可以看作是一个矩阵（或表格）。

#### 二维数组的定义和初始化：

```c
int matrix[2][3] = {
    {1, 2, 3},
    {4, 5, 6}
};
```

- 访问二维数组的元素：

```c
int value = matrix[1][2];  // 访问第二行第三列的元素，值为 6
```

- 遍历二维数组：

```c
for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 3; j++) {
        printf("%d ", matrix[i][j]);
    }
    printf("\n");
}
```

### 7. **数组的局限性**

- **固定大小**：数组的大小在定义时是固定的，不能动态改变。这意味着当你使用数组时，需要预先知道数组的大小。
- **不能返回数组**：C 函数不能直接返回一个数组，而是需要使用指针或动态内存分配来返回数组。

### 8. **数组和指针**

在 C 语言中，`数组名`本质上是一个指向数组第一个元素的指针。因此，可以使用指针来遍历数组。

#### 示例：

```c
int numbers[5] = {1, 2, 3, 4, 5};
int *ptr = numbers;

for (int i = 0; i < 5; i++) {
    printf("%d ", *(ptr + i));  // 使用指针遍历数组
}
```

### 示例：计算数组中所有元素的总和

```c
#include <stdio.h>

int main() {
    int numbers[] = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i < 5; i++) {
        sum += numbers[i];  // 计算数组元素的总和
    }

    printf("Sum of array elements: %d\n", sum);  // 输出总和

    return 0;
}
```

### 总结

- **数组定义**：C 语言中数组用于存储同类型数据，大小在定义时确定。
- **数组初始化**：数组可以在定义时初始化，未初始化的元素默认为 `0`。
- **数组访问**：可以通过索引访问和修改数组中的元素，索引从 `0` 开始。
- **多维数组**：可以定义多维数组，如二维数组用于表示矩阵。
- **数组和指针的关系**：数组名可以作为指向数组第一个元素的指针来使用。

数组是 C 语言中处理多个相同类型数据的基本工具，理解它的定义、初始化和使用方式是掌握 C 语言的关键。