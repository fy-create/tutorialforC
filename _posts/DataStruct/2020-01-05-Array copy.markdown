---
layout: post
title:  "数组（Array）"
categories: dataStruct
---

### 数组（Array）概念及常用操作 - C语言实现

#### 1. **概念**：
- **数组（Array）** 是一种 **线性数据结构**，它的元素按顺序存储，并且存储在 **连续的内存地址** 上。数组中的元素可以通过索引进行访问，支持 **随机访问**，即通过索引在常数时间内访问任意元素，时间复杂度为 O(1)。
- **索引**：数组的索引通常从 0 开始。
- 数组在定义时需要指定大小，大小是固定的，无法动态扩展。

#### 2. **常用操作**：

##### 2.1. **遍历（Traversal）**：
遍历数组就是按顺序访问数组中的每一个元素。在 C 语言中可以通过 `for` 循环来实现遍历操作。

**示例代码：**
```c
#include <stdio.h>

int main() {
    int arr[] = {1, 2, 3, 4, 5};  // 定义并初始化一个数组
    int n = sizeof(arr) / sizeof(arr[0]);  // 计算数组的长度

    // 遍历数组并打印每个元素
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}
```

**输出：**
```
1 2 3 4 5
```

##### 2.2. **插入（Insertion）**：
在数组中插入一个新元素，需要将插入位置之后的元素向右移动。由于数组是固定大小的，必须确保数组有足够的空间来插入新的元素。

**示例代码：**
```c
#include <stdio.h>

int main() {
    int arr[6] = {1, 2, 3, 4, 5};  // 创建一个大小为 6 的数组，预留出一个空位
    int n = 5;  // 数组中当前元素的数量

    int pos = 2;  // 插入位置
    int value = 10;  // 要插入的值

    // 将从插入位置开始的元素向右移动
    for (int i = n; i > pos; i--) {
        arr[i] = arr[i - 1];
    }

    arr[pos] = value;  // 插入新元素
    n++;  // 元素数量增加

    // 打印插入后的数组
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}
```

**输出：**
```
1 2 10 3 4 5
```

##### 2.3. **删除（Deletion）**：
删除数组中的元素时，需要将删除位置之后的元素向左移动，以填补被删除的元素的空位。

**示例代码：**
```c
#include <stdio.h>

int main() {
    int arr[] = {1, 2, 3, 4, 5};  // 定义并初始化一个数组
    int n = 5;  // 当前数组的元素个数

    int pos = 2;  // 要删除的元素的索引

    // 将从删除位置之后的元素向左移动
    for (int i = pos; i < n - 1; i++) {
        arr[i] = arr[i + 1];
    }

    n--;  // 元素数量减少

    // 打印删除后的数组
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}
```

**输出：**
```
1 2 4 5
```

##### 2.4. **查找（Search）**：
查找一个元素就是从数组的第一个元素开始依次遍历数组，直到找到目标元素。查找操作的时间复杂度为 O(n)。

**示例代码：**
```c
#include <stdio.h>

int main() {
    int arr[] = {1, 2, 3, 4, 5};  // 定义并初始化一个数组
    int n = 5;  // 当前数组的元素个数
    int target = 4;  // 要查找的目标元素

    // 遍历数组查找目标元素
    for (int i = 0; i < n; i++) {
        if (arr[i] == target) {
            printf("元素 %d 在数组中的索引是 %d\n", target, i);
            break;
        }
    }

    return 0;
}
```

**输出：**
```
元素 4 在数组中的索引是 3
```

---

### 3. **总结**
在 C 语言中，数组的操作虽然比较基础，但它们的复杂度和局限性（比如数组大小固定、插入和删除操作需要移动元素等）对理解更复杂的数据结构如链表、动态数组等非常重要。常见操作的时间复杂度总结如下：

- **遍历**：O(n)
- **随机访问（通过索引访问元素）**：O(1)
- **插入/删除**：
  - 插入到数组末尾：O(1)
  - 插入到数组中间：O(n)（由于需要移动元素）
  - 删除：O(n)（需要移动元素）
- **查找**：O(n)