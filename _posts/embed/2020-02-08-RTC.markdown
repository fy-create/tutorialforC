---
layout: post
title:  "RTC"
categories: embed
---

**RTC**（Real-Time Clock，实时时钟）是微控制器（MCU）中的一个独立模块，用于提供准确的日历时间和时钟功能。RTC 允许设备在低功耗模式下持续跟踪时间，即使设备断电后，也可以通过电池备份继续保持时间的准确性。这对于需要长期保持时间的嵌入式系统非常有用，例如需要记录时间戳的应用、数据日志记录或定时器任务。

### **RTC 的功能和特点**

1. **实时时钟**：
   - RTC 提供年、月、日、小时、分钟、秒等计时功能，通常也会包含 **星期**、**闰年** 计算等复杂的日历功能。
   
2. **低功耗设计**：
   - RTC 是设计为在低功耗模式下运行的模块，通常与微控制器的其他部分分离，并且使用专用的 **低速晶振（32.768 kHz）**，即使系统其他部分处于低功耗或关闭状态，RTC 仍能保持计时。

3. **电池备份**：
   - 在微控制器断电时，RTC 可以由一个备用电池（如纽扣电池）供电，确保在系统掉电期间时间不会丢失。STM32 中的 **VBAT 引脚** 就是用于为 RTC 提供电池备份电源的引脚。

4. **定时器和闹钟功能**：
   - RTC 通常提供 **闹钟** 或 **定时中断** 功能，可以在设定的时间产生中断，唤醒微控制器。这非常适合定时任务的实现，例如每天某个时刻自动执行任务。

5. **时间戳功能**：
   - 某些 RTC 还支持事件的时间戳功能，可以在特定事件发生时记录时间，如记录设备启动或外部事件的发生时间。

6. **温度补偿**：
   - 在某些高精度应用中，RTC 可以通过内置的温度传感器对时间进行补偿，确保不同温度环境下时间的准确性。

### **STM32 中的 RTC 模块**

在 STM32 微控制器中，**RTC** 模块具有以下特性：
1. **独立低速时钟**：RTC 使用独立的 **低速外部晶振（LSE，通常为32.768 kHz）** 或 **内部低速时钟（LSI，约为40 kHz）** 作为时钟源。
   
2. **VBAT 电池供电**：STM32 的 **VBAT 引脚** 支持外接电池，可以在主电源关闭时为 RTC 和后备寄存器提供电源，从而保证断电时钟不丢失。

3. **闹钟和唤醒功能**：RTC 提供 **闹钟中断**，可以设置特定的时间（如每天的某个时刻）来唤醒系统，适用于定时任务。还可以使用 **定时唤醒功能**，比如让微控制器在设定的时间间隔内唤醒。

4. **日历功能**：STM32 RTC 支持 **年、月、日、星期、时、分、秒** 的计时，并支持 **闰年** 计算。

5. **低功耗模式下继续运行**：RTC 可以在 **低功耗模式**（如 Stop、Standby 模式）下继续运行，而不会影响系统的功耗表现。

### **STM32 RTC 使用场景**

- **计时与日历功能**：例如设备中的实时时钟功能，可以用于显示当前时间或记录事件的发生时间。
- **数据日志记录**：为传感器数据添加时间戳，便于后期分析。
- **定时任务**：每天在设定时间唤醒微控制器，执行任务（如数据上传、状态检测等）。
- **断电保持时间**：设备断电后，RTC 仍可保持时间准确性，并在设备重启时继续正常运行。
- **低功耗唤醒**：使用 RTC 在设定的时间或周期性唤醒系统，从而节省功耗。

### **STM32 RTC 配置与使用示例**

下面是一个简单的使用 RTC 的例子，假设我们使用 **STM32CubeMX** 来生成初始化代码，并配置 RTC 模块。我们会设置 RTC 以记录当前时间，并每隔一段时间产生中断唤醒系统。

#### **1. 使用 STM32CubeMX 配置 RTC**

- 打开 **STM32CubeMX**，选择目标芯片（如 STM32F103C8T6）。
- 在 **Peripherals** 栏目中，启用 **RTC**，并选择 **低速外部晶振（LSE）** 作为 RTC 的时钟源。
- 在 RTC 选项中，启用 **闹钟中断**（Alarm A），并设置初始时间。
- 生成代码并导入 **STM32CubeIDE**。

#### **2. 初始化代码**

`main.c` 文件的部分代码如下：

```c
#include "main.h"
#include "stm32f1xx_hal.h"

RTC_HandleTypeDef hrtc;  // RTC 句柄

// 初始化 RTC
void MX_RTC_Init(void) {
    // 使用 LSE（外部低速晶振）作为 RTC 的时钟源
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
    
    // 配置 RTC
    hrtc.Instance = RTC;
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;  // 设置异步分频系数
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
    HAL_RTC_Init(&hrtc);
    
    // 设置初始时间为 12:00:00
    RTC_TimeTypeDef sTime = {0};
    sTime.Hours = 12;
    sTime.Minutes = 0;
    sTime.Seconds = 0;
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
    
    // 设置日期为 2023-09-14
    RTC_DateTypeDef sDate = {0};
    sDate.Year = 23;
    sDate.Month = RTC_MONTH_SEPTEMBER;
    sDate.Date = 14;
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
}

// 主函数
int main(void) {
    HAL_Init();  // 初始化 HAL 库
    MX_RTC_Init();  // 初始化 RTC

    while (1) {
        // 读取当前时间
        RTC_TimeTypeDef currentTime;
        HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
        
        // 可以在此处进行其他操作，例如每隔一秒读取时间
        HAL_Delay(1000);
    }
}
```

#### **3. 设置闹钟功能**

要使用 RTC 的闹钟功能，可以在初始化 RTC 时配置闹钟，代码如下：

```c
// 设置闹钟
void Set_RTC_Alarm(void) {
    RTC_AlarmTypeDef sAlarm = {0};
    sAlarm.AlarmTime.Hours = 12;
    sAlarm.AlarmTime.Minutes = 1;  // 12:01:00 触发闹钟
    sAlarm.AlarmTime.Seconds = 0;
    sAlarm.Alarm = RTC_ALARM_A;
    HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);  // 启用闹钟中断
}

// RTC 闹钟中断回调函数
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
    // 在这里处理闹钟事件，比如切换 LED 状态
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
```

### **RTC 的常见应用场景**

1. **低功耗设备唤醒**：
   - 许多嵌入式系统会在深度睡眠（如 Standby 或 Stop 模式）下运行，以节省电力。在这些模式下，RTC 可以继续运行，并在设定的时间或周期内唤醒设备。
   
2. **数据日志记录**：
   - RTC 常用于数据日志记录应用，能够为传感器或事件数据添加精确的时间戳，便于后续的数据分析或追踪。

3. **定时任务**：
   - RTC 支持定时任务处理。例如，在物联网设备中，RTC 可以每隔一定时间唤醒系统，采集传感器数据或上传数据到云端。

4. **时间显示**：
   - RTC 可以为带有时钟显示的设备提供精确的时间基础，常见于电子时钟、家电中的时间功能等。

### **总结**

- **RTC（实时时钟）** 是嵌入式系统中用于保持准确时间的外设模块，适合应用

于长期计时和定时任务中。
- STM32 的 RTC 支持年、月、日、时、分、秒的计时，并提供低功耗模式下的持续运行和电池备份功能，确保设备断电后依然能够保持时间准确。
- RTC 还支持闹钟、定时中断等功能，适合在低功耗场景中使用，如定时唤醒设备执行任务或记录数据。
- 通过 RTC，可以实现各种基于时间的任务，如数据记录、低功耗唤醒、时间戳生成等。