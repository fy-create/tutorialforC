---
layout: post
title:  "DMA"
categories: embed
---

**DMA（Direct Memory Access，直接存储器访问）** 是一种用于提升数据传输效率的技术，允许外设在不经过 **CPU** 的情况下直接与内存进行数据交换。通过 DMA，数据可以从内存传输到外设，或者从外设传输到内存，而无需占用 CPU 的大量资源，从而提高系统整体性能。

### **DMA 的工作原理**

通常情况下，数据的传输是由 CPU 通过软件指令来执行的。例如，CPU 需要从传感器读取数据并将其写入内存，或者将数据从内存发送到外设（如 USART、SPI 等）。这意味着 CPU 必须一直参与数据的读取和写入操作。

**DMA 的基本工作原理** 是：当需要传输数据时，CPU 将任务交给 DMA 控制器，DMA 控制器会负责直接在内存与外设之间进行数据传输，而 CPU 在此过程中无需参与，可以继续执行其他任务。当 DMA 完成数据传输后，可以通过中断通知 CPU。这样做不仅可以加快数据传输速度，还释放了 CPU 的处理能力，尤其在大量数据传输的场景下，优势更加明显。

### **DMA 的优势**
1. **提升数据传输效率**：DMA 允许在没有 CPU 介入的情况下完成数据传输，传输过程更快且不影响 CPU 的运行。
2. **减轻 CPU 负担**：通过 DMA，CPU 不再需要处理每个数据字节的传输任务，可以执行更多重要的任务，提高系统的并发性能。
3. **适用于大数据量传输**：对于传感器数据采集、音频数据传输、显示数据刷新等需要处理大量数据的场景，DMA 极大提高了系统效率。
4. **降低实时性要求**：由于 DMA 控制器负责数据传输，CPU 不再需要时刻参与每个传输过程，从而减少实时性要求。

### **STM32 中的 DMA**

在 **STM32** 微控制器中，**DMA 控制器** 是一个独立的硬件模块，它可以连接到多个外设（如 **ADC**、**USART**、**SPI**、**I2C** 等）以及内存，负责在外设和内存之间进行数据传输。

#### **DMA 控制器的特点**：
- **多个通道**：STM32 的 DMA 控制器有多个 DMA 通道，每个通道可以用于不同的外设和数据传输任务。例如，可以同时使用一个通道将 ADC 数据传输到内存，同时使用另一个通道从内存传输数据到 USART。
- **可配置的优先级**：不同的 DMA 通道可以配置不同的优先级，优先级高的通道可以抢占低优先级的通道，以保证重要的数据传输任务优先完成。
- **多种传输模式**：支持多种传输模式，例如：
  - **存储器到存储器**：数据从内存的一部分复制到另一部分。
  - **外设到存储器**：外设的数据直接传输到内存中（例如，从 ADC 采集数据并传输到内存）。
  - **存储器到外设**：从内存中取数据传输到外设（例如，通过 USART 发送数据）。

#### **DMA的常见应用场景**：
1. **ADC 数据采集**：
   - DMA 可用于从 **ADC（模数转换器）** 持续采集数据并存储到内存中，而无需 CPU 参与。
   - 典型应用：从温度传感器、光传感器等获取模拟信号，并转换为数字数据存储到内存中。

2. **串行通信**：
   - DMA 可以用于 **USART** 或 **SPI** 等通信外设，使得数据可以自动传输到外设进行通信，而不需要 CPU 逐字节处理数据。
   - 典型应用：高速数据通信，例如从传感器读取数据并通过串口发送到 PC。

3. **图像数据传输**：
   - 在显示屏上刷新图像时，DMA 可以从存储器中读取图像数据并传输到显示控制器，极大提高刷新速度并减轻 CPU 负担。
   - 典型应用：OLED 屏幕数据刷新、TFT LCD 屏幕显示控制等。

4. **音频数据处理**：
   - 在音频信号处理中，DMA 可以用于从内存中读取音频数据并发送到音频 DAC（数模转换器），实现实时音频输出。
   - 典型应用：音频播放设备、录音设备中的数据传输。

### **DMA 的传输模式**

STM32 的 DMA 控制器支持多种传输模式，可以根据具体应用需求进行配置：

1. **普通模式**：
   - DMA 通道在传输完指定数量的数据后，自动停止工作。CPU 可以根据需要重新启动 DMA 通道。

2. **循环模式**：
   - DMA 进入循环模式后，会不断地重复数据传输操作。比如，ADC 数据可以持续地通过 DMA 传输到内存，这种模式在实时监测系统中非常常见。

3. **单次模式和突发模式**：
   - **单次模式**：每次只传输一个数据项，然后重新请求下一次传输。
   - **突发模式**：DMA 每次传输多个数据项，以提高传输效率。

4. **传输方向**：
   - DMA 控制器可以从 **外设到内存**、**内存到外设** 或 **内存到内存** 传输数据。

### **DMA 传输过程**

1. **配置 DMA 通道**：使用软件配置 DMA 控制器，包括选择传输的方向（例如外设到内存或内存到外设）、传输的数据大小、优先级等。
2. **启动 DMA**：CPU 启动 DMA 控制器，并为其分配任务。接下来，DMA 控制器接管数据传输工作。
3. **数据传输**：DMA 开始从外设读取数据或从内存写入数据，完成传输任务。
4. **中断通知**：DMA 完成传输后，可以通过 **中断** 通知 CPU 数据传输已完成。CPU 可以根据中断执行后续操作。

### **示例：使用 DMA 读取 ADC 数据**

在 STM32 微控制器中，可以通过 DMA 使能 ADC 数据的自动传输，以下是 DMA 结合 ADC 的简单示例流程：

```c
#include "stm32f1xx.h"  // 包含 STM32 相关库

uint16_t adc_buffer[10];  // 存放 ADC 数据的缓冲区

void DMA_ADC_Init(void) {
    // 配置 ADC
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;  // 启用 ADC1 时钟
    ADC1->SQR1 = 0;  // 设置 ADC 转换序列
    ADC1->CR1 = ADC_CR1_SCAN;  // 扫描模式
    ADC1->CR2 = ADC_CR2_CONT | ADC_CR2_DMA;  // 连续转换和 DMA 模式
    
    // 配置 DMA
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;  // 启用 DMA1 时钟
    DMA1_Channel1->CCR = DMA_CCR_PL_0 | DMA_CCR_MINC | DMA_CCR_CIRC;  // 高优先级、内存增量模式、循环模式
    DMA1_Channel1->CNDTR = 10;  // 传输10个数据
    DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);  // 外设地址为 ADC 数据寄存器
    DMA1_Channel1->CMAR = (uint32_t)adc_buffer;  // 内存地址为 adc_buffer 缓冲区
    DMA1_Channel1->CCR |= DMA_CCR_EN;  // 启用 DMA 通道

    // 启动 ADC
    ADC1->CR2 |= ADC_CR2_ADON;
    ADC1->CR2 |= ADC_CR2_SWSTART;  // 启动转换
}
```

在这个例子中，DMA 被配置为从 **ADC1** 的数据寄存器传输数据到内存中的 **adc_buffer**，而 CPU 不需要干预数据传输。完成后，CPU 可以通过读取缓冲区获取 ADC 采集到的数据。

### **总结**

**DMA（直接存储器访问）** 是一种非常高效的数据传输方式，能够在不占用 CPU 资源的情况下完成外设和内存之间的数据传输。在 STM32 等微控制器中，DMA 控制器通过多个通道支持并行的数据传输，广泛应用于 ADC 采集、串行通信、音频处理等场景中，大大提高了系统的响应速度和处理效率。