---
layout: post
title:  "I2C"
categories: embed
---

**I2C (Inter-Integrated Circuit)** 是一种串行通信协议，广泛应用于嵌入式系统和电子设备中，用于在主设备（Master）和多个从设备（Slave）之间进行短距离、低速的通信。I2C 由 Philips Semiconductor（现为 NXP Semiconductor）开发，具有低引脚占用和多设备连接的特点，因此在传感器、显示器、EEPROM 和其他外围设备中得到广泛使用。

### 1. **I2C 的基础概念**
I2C 是一种 **双线、半双工** 的串行通信协议，它使用两根总线线：
- **SCL (Serial Clock Line)**：由主设备生成的时钟信号，用于同步数据传输。
- **SDA (Serial Data Line)**：数据线，用于发送和接收数据。

#### 通信方式：
I2C 是 **主从模式** 通信协议，主设备控制时钟信号并发起通信，从设备根据主设备的请求进行数据发送或接收。一个主设备可以连接多个从设备，每个从设备都有唯一的地址。

#### 特点：
- **多主多从**：I2C 支持多个主设备和多个从设备，共享同一条总线。
- **半双工**：在同一时刻，数据只能单向传输（要么从主设备到从设备，要么从从设备到主设备）。

### 2. **I2C 的工作原理**

I2C 使用主设备发起的时钟同步方式来确保数据传输。主设备通过 SCL 线控制时钟，SDA 线上进行数据的发送和接收。I2C 数据传输的每一位都在时钟的上升沿或下降沿同步进行。

#### **数据传输过程**：
1. **起始条件（Start Condition）**：当 SDA 线在 SCL 线保持高电平时，从高电平跳变为低电平，表示通信开始。
2. **从设备地址传输**：主设备首先发送从设备的 7 位或 10 位地址，后跟一个读/写位，表明主设备希望进行读操作（1）还是写操作（0）。
3. **应答（ACK）**：从设备接收到地址后，向主设备发送一个 **ACK** 信号（低电平）表示准备通信，或发送 **NACK** 信号（高电平）表示拒绝通信。
4. **数据传输**：数据位按照从最高位到最低位的顺序在 SDA 线上传输，主设备每发送一个字节后，从设备需要发送 ACK 信号。
5. **停止条件（Stop Condition）**：当 SDA 线在 SCL 线保持高电平时，从低电平跳变为高电平，表示通信结束。

### 3. **I2C 的数据帧格式**
I2C 的每个数据帧由以下部分组成：
- **起始条件（Start Condition）**。
- **从设备地址**：7 位或 10 位从设备地址。
- **读/写位**：表明是读操作还是写操作。
- **ACK/NACK**：应答位，由接收方发送，表明是否准备接收数据。
- **数据**：8 位的数据。
- **停止条件（Stop Condition）**。

#### **读操作示例**：
- 主设备发起起始条件。
- 主设备发送从设备地址，并设置读位。
- 从设备应答后，主设备读取数据。
- 主设备发送 NACK，表示数据传输完成。
- 主设备发起停止条件，结束通信。

#### **写操作示例**：
- 主设备发起起始条件。
- 主设备发送从设备地址，并设置写位。
- 从设备应答后，主设备开始发送数据。
- 每传输一个字节，从设备返回 ACK。
- 主设备发起停止条件，结束通信。

### 4. **I2C 的优缺点**

#### **优点**：
- **低引脚占用**：I2C 只需要两根总线（SDA 和 SCL），无论连接多少个从设备，因此大幅减少了引脚的占用。
- **多设备支持**：I2C 支持在同一总线上连接多个从设备，每个从设备都有唯一的地址，主设备通过地址区分设备。
- **双向通信**：I2C 支持数据的双向传输，主设备既可以发送数据给从设备，也可以从从设备接收数据。

#### **缺点**：
- **速度较慢**：与 SPI 相比，I2C 的通信速度较慢，最高速度通常为 400 kbps（标准模式），有些设备支持 3.4 Mbps（高速模式），但仍不如 SPI 的速度高。
- **复杂性较高**：I2C 的协议和时序比 SPI 复杂，尤其是在多主设备系统中。
- **距离限制**：I2C 适用于短距离通信，通常用于设备之间的本地通信，不适合远距离数据传输。

### 5. **I2C 的应用场景**
I2C 广泛应用于嵌入式系统中，特别是在需要连接多个低速外设的场景中。

#### 常见应用：
- **传感器通信**：许多传感器（如温度传感器、加速度计等）通过 I2C 与微控制器通信，传输数据。
- **存储器**：I2C 常用于 EEPROM 和其他小型存储器的读写。
- **显示屏**：一些 OLED 或 LCD 显示屏通过 I2C 接口接收图像和数据。
- **嵌入式设备**：嵌入式系统中的多个外设（如键盘、ADC、DAC 等）通过 I2C 总线进行通信。

### 6. **I2C 与其他通信协议的对比**

#### **I2C vs SPI**
- **引脚数**：I2C 只需要 2 根引脚（SDA 和 SCL），而 SPI 需要至少 4 根引脚（MISO、MOSI、SCLK、SS）。
- **速度**：SPI 的传输速度通常比 I2C 高。
- **多设备支持**：I2C 原生支持多个从设备，而 SPI 需要每个从设备都有一个单独的片选引脚。

#### **I2C vs UART**
- **引脚数**：I2C 只需要 2 根引脚，而 UART 需要 2 根引脚（TX 和 RX）。
- **通信方式**：I2C 是同步的，UART 是异步的。
- **速度**：UART 通常用于较长距离的通信，而 I2C 适用于短距离的本地设备间通信。

### 7. **I2C 示例：读取温度传感器数据**

以下是使用 I2C 从温度传感器读取数据的伪代码：

```c
#define I2C_ADDRESS 0x48  // 温度传感器地址

void I2C_Read_Temperature() {
    I2C_Start();                // 发送起始条件
    I2C_Send_Address(I2C_ADDRESS, I2C_WRITE);  // 发送从设备地址和写命令
    I2C_Send_Data(0x00);        // 发送读取温度命令
    I2C_Start();                // 重新发送起始条件
    I2C_Send_Address(I2C_ADDRESS, I2C_READ);   // 发送从设备地址和读命令
    uint8_t temp = I2C_Read_Data(); // 读取温度数据
    I2C_Stop();                 // 发送停止条件
    printf("Temperature: %d°C\n", temp);
}
```

### 8. **I2C 在嵌入式系统中的实现**

I2C 可以通过硬件模块或软件实现。大多数现代微控制器（如 STM32、Arduino、PIC 等）都内置 I2C 控制器，开发者只需通过相应库或寄存器配置即可完成 I2C 通信。

对于不支持硬件 I2C 的系统，开发者可以通过软件模拟 I2C 总线（即"软 I2C"），但这种方式速度较慢，且对时序要求高。

### 总结

**I2C** 是一种非常适合低速、短距离、多设备通信的协议，它通过简单的双线接口极大地减少了引脚占用，适合嵌入式系统中的传感器、显示器、存储器等外围设备的连接。虽然 I2C 的速度比 SPI 慢，但其灵活的多设备连接和低成本特性使其成为许多嵌入式应用的首选。