---
layout: post
title:  "USART"
categories: embed
---

**USART（Universal Synchronous/Asynchronous Receiver/Transmitter，通用同步/异步收发器）** 是一种常用的串行通信接口，用于在嵌入式系统中实现数据的串行传输。USART 支持 **同步** 和 **异步** 两种通信模式，广泛用于 **串行通信**，如通过串口调试、连接外部设备（如 GPS 模块、蓝牙模块、传感器）等。

在 STM32 微控制器中，**USART** 和 **UART** 外设都是标准的串行通信接口，它们非常相似，区别在于：
- **USART**：支持 **同步通信** 和 **异步通信**。
- **UART**：仅支持 **异步通信**，即不需要时钟线。

### **USART 的工作原理**

USART 通过串行数据线将数据一位一位地传输，常见的传输方式是 **异步串行通信**，它通过一根数据线发送数据（TX），一根数据线接收数据（RX）。在异步模式下，发送和接收设备使用 **波特率（Baud Rate）** 来同步数据传输速率，而不需要额外的时钟信号。

#### **异步通信模式（UART 模式）**
在异步模式下，USART 只使用 **TX（发送）** 和 **RX（接收）** 两条数据线进行通信。通信双方需要预先商定相同的 **波特率**，以确保同步传输。

1. **起始位**：数据传输的开始标志，通常是低电平。
2. **数据位**：数据位长度通常为 8 位（或 9 位），表示实际传输的数据。
3. **校验位（可选）**：用于检测数据传输中的错误，奇偶校验。
4. **停止位**：标志一帧数据的结束，通常为 1 位或 2 位。

#### **同步通信模式**
在同步通信模式下，USART 通过一根额外的时钟线（**SCLK**）同步发送方和接收方的时钟信号，从而实现精确的数据同步传输。这种模式常用于高速、可靠性要求较高的应用。

1. **数据线**：TX（发送数据），RX（接收数据）。
2. **时钟线**：SCLK 用于同步传输双方的数据时序。

### **USART 在 STM32 中的特性**

在 STM32 微控制器中，USART 和 UART 外设非常灵活，支持多种配置和通信模式。它们具有以下特性：

1. **支持多种通信模式**：
   - **异步通信（UART）**：常用于标准串行通信，广泛用于调试和设备通信。
   - **同步通信（USART）**：通过时钟信号同步传输数据，适合高速通信。
   - **多处理器通信模式**：支持主从式的多设备通信。
   - **LIN（Local Interconnect Network）模式**：专为汽车网络设计的协议。

2. **支持 DMA（直接存储器访问）**：
   - USART 可以结合 **DMA** 使用，进行大数据量的传输，减少 CPU 负担。DMA 允许自动从内存中读取或写入数据到 USART 外设。

3. **硬件流控制**：
   - 支持 **RTS（请求发送）** 和 **CTS（清除发送）** 的流控制，防止发送方或接收方因处理不过来而丢失数据。

4. **波特率可编程**：
   - STM32 的 USART 波特率是可编程的，通常支持从 1200 bps 到数 Mbps 的通信速率。

5. **可配置的数据格式**：
   - 支持 8 位、9 位数据位，1 位或 2 位停止位，以及可选的奇偶校验位。

### **STM32 中 USART 的引脚和硬件连接**

在 STM32 微控制器中，USART 通常使用以下几个引脚：
1. **TX**：用于发送数据。
2. **RX**：用于接收数据。
3. **SCLK（同步模式下）**：用于同步通信时的时钟线。
4. **RTS 和 CTS（可选的流控制引脚）**：用于硬件流控制。

#### **常见的 USART 引脚连接**
- 在常规的异步串行通信中，通常只需要连接 **TX**、**RX** 和 **GND**。如果使用硬件流控制，则还需要连接 **RTS** 和 **CTS** 引脚。
- 在同步模式下，需要额外连接 **SCLK** 引脚。

### **USART 在 STM32 中的应用场景**

1. **调试输出**：
   - USART 是嵌入式开发中最常用的调试手段之一。开发者通过 USART 将调试信息从 STM32 发送到计算机，用于问题排查。
   
2. **设备通信**：
   - 通过 USART 接口，STM32 可以与各种外设进行通信，例如 **GPS 模块**、**蓝牙模块**、**GSM 模块**、**Wi-Fi 模块** 等。

3. **串行终端通信**：
   - STM32 可以与串口终端软件（如 **PuTTY**、**Tera Term**）通信，实现数据的发送与接收。

4. **工业控制**：
   - USART 适用于工业场景中的设备控制和数据采集，例如传感器网络、PLC 控制系统。

### **STM32 USART 使用示例**

以下是一个使用 STM32 的 **USART 外设** 实现串口通信的简单示例。我们将配置 STM32 通过 USART 发送和接收数据，并通过串口终端与 STM32 进行交互。

#### **1. 使用 STM32CubeMX 配置 USART**

1. 打开 **STM32CubeMX**，选择目标芯片（如 **STM32F103C8T6**）。
2. 在外设选项中启用 **USART1** 或 **UART1**，配置波特率（如 115200 bps），选择 **8N1**（8 个数据位，无校验，1 个停止位）。
3. 将 USART1 的 **TX** 和 **RX** 引脚映射到相应的引脚（如 **PA9** 和 **PA10**）。
4. 生成代码并导入 **STM32CubeIDE**。

#### **2. 初始化 USART**

在生成的项目中，`main.c` 文件中包含了 USART 的初始化代码，`MX_USART1_UART_Init()` 会自动生成。我们可以直接使用 HAL 库函数进行数据传输。

```c
#include "main.h"
#include "usart.h"

// 定义要发送的数据
uint8_t txData[] = "Hello, USART!\r\n";
uint8_t rxData[10];  // 接收数据缓冲区

int main(void) {
    HAL_Init();  // 初始化 HAL 库
    SystemClock_Config();  // 配置系统时钟
    MX_USART1_UART_Init();  // 初始化 USART1

    // 主循环
    while (1) {
        // 发送数据
        HAL_UART_Transmit(&huart1, txData, sizeof(txData) - 1, HAL_MAX_DELAY);

        // 接收数据
        HAL_UART_Receive(&huart1, rxData, 10, HAL_MAX_DELAY);
        
        // 可以在这里处理接收到的数据
    }
}
```

#### **3. 使用 HAL 库进行通信**

- **HAL_UART_Transmit()**：用于通过 USART 发送数据。
- **HAL_UART_Receive()**：用于通过 USART 接收数据。

在这段代码中，STM32 会将 `"Hello, USART!"` 发送到计算机的串口终端，并等待接收 10 个字节的数据。

#### **4. 串口终端调试**

通过 **USB 转串口模块**，将 STM32 的 USART 接口连接到 PC，并使用串口调试工具（如 **PuTTY**、**Tera Term**）查看数据。配置串口工具的波特率和其他通信参数与 STM32 的配置一致（如 115200 bps、8N1）。

### **USART 的高级功能**

1. **DMA 模式**：
   - 使用 **DMA（Direct Memory Access）** 可以极大提升大数据量传输时的效率，尤其在需要长时间或连续的数据通信时，通过 DMA 可以让数据传输过程更加高效，减轻 CPU 的负担。

2. **中断模式**：
   - USART 支持中断模式，可以在发送或接收完成后触发中断，从而不需要 CPU 轮询状态。常用于需要精确处理数据的场景。

3. **硬件流控制**：
   - 如果数据传输速度过快，接收方可能无法及时处理。USART 支持 **RTS（请求发送）/CTS（清除发送）** 硬件流控制，当接收方准备好接收数据时，通知发送方继续发送，避免数据丢失。

### **USART 的常见问题**

1. **波特率不匹配

**：
   - USART 通信时，发送方和接收方的波特率必须严格匹配，否则数据会被错误解释。波特率误差过大会导致乱码或无法通信。

2. **接收超时**：
   - 在接收模式下，如果预期数据未能及时到达，可能会发生接收超时错误。可以通过中断或设置超时时间来解决这个问题。

3. **数据丢失或错误**：
   - 如果数据传输速度过快或处理不及时，可能会导致数据丢失。可以通过硬件流控制或使用更大的接收缓冲区来缓解这种情况。

### **总结**

- **USART（通用同步/异步收发器）** 是一种广泛应用于嵌入式系统中的串行通信接口，支持同步和异步两种通信模式。它在 STM32 中用于串行数据的发送和接收，支持调试、设备通信和工业控制等应用场景。
- STM32 的 USART 支持多种功能，包括 DMA、硬件流控制和中断，使其在数据传输效率和可靠性方面表现出色。
- 使用 **STM32CubeMX** 和 **HAL 库**，开发者可以轻松配置和使用 STM32 的 USART 进行串行通信，适用于调试输出、设备通信和数据传输等任务。