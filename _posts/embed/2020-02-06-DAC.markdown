---
layout: post
title:  "DAC"
categories: embed
---

**DAC**（Digital-to-Analog Converter，数模转换器）是将数字信号转换为模拟信号的设备或功能模块。在嵌入式系统和微控制器中，**DAC** 通常用于将微控制器处理的数字数据转换成模拟信号，以驱动模拟设备（如扬声器、音频系统、电压控制设备等）。

### **DAC 的工作原理**

在微控制器中，处理的信号通常是 **数字信号**，即 0 和 1 的二进制数。但在实际应用中，许多设备（如扬声器、模拟电机、传感器等）需要处理 **模拟信号**，即连续变化的电压或电流。**DAC** 的作用就是将这种离散的数字信号转换为连续变化的模拟信号。

#### **DAC 的基本过程**：
1. **输入**：接受一个 **N位的数字输入**。例如，8位 DAC 可以接受 0 到 255 之间的数字，12位 DAC 可以接受 0 到 4095 之间的数字。
2. **转换**：根据输入的数字值，DAC 会输出相应的模拟电压或电流。输入值越大，输出电压或电流越高。
3. **输出**：生成一个连续变化的电压或电流信号，供外部设备使用。

例如，一个 12 位的 DAC，如果参考电压是 **3.3V**，那么输出电压会根据输入数字值从 **0V** 到 **3.3V** 之间线性变化。输入值为 0 时输出 0V，输入值为 4095 时输出 3.3V，输入值为 2048 时输出 1.65V。

### **STM32 微控制器中的 DAC**

在 **STM32** 系列微控制器中，某些型号内置了 DAC 模块，例如 **STM32F103** 系列的高端型号以及 **STM32F4**、**STM32L** 等系列。通过 DAC，STM32 微控制器可以将数字数据转换成模拟电压信号，适合用于音频输出、信号生成、电压控制等场景。

#### **STM32 中 DAC 的主要特点**：
1. **分辨率**：
   - STM32 的 DAC 模块通常支持 **12位** 分辨率。12 位分辨率意味着 DAC 可以输出 4096 个不同的电压值（0 到 4095），因此能产生较为精细的模拟信号。
   
2. **输出电压范围**：
   - DAC 输出的电压通常在 **0V** 到 **Vref（参考电压）** 之间。Vref 通常为 3.3V（与系统供电电压相同），但也可以通过外部电路调整。

3. **缓冲器模式**：
   - STM32 的 DAC 可以配置为带缓冲模式，使得 DAC 输出更平稳，减少由负载变化引起的波动。

4. **DMA 支持**：
   - STM32 的 DAC 可以结合 **DMA（Direct Memory Access）** 工作，从而自动、连续地将内存中的数字数据转换为模拟信号输出，而无需 CPU 参与。对于生成波形（如音频信号或正弦波信号），这非常有用。

5. **多通道**：
   - 某些 STM32 微控制器支持 **多个 DAC 通道**（如 **DAC1** 和 **DAC2**），允许同时生成多个模拟信号输出。

#### **STM32 中 DAC 的常见应用**：
1. **音频输出**：
   - DAC 可以用于将数字音频信号转换成模拟音频信号，并输出到扬声器等设备。
   
2. **信号生成**：
   - DAC 可以用于生成正弦波、方波、锯齿波等各种信号，广泛应用于信号发生器和测试设备。
   
3. **电压控制**：
   - 通过 DAC 输出特定的电压，可以控制外部电路中的电压输入，广泛应用于自动化控制和工业控制系统中。

4. **传感器模拟**：
   - 用 DAC 模拟传感器输出的模拟信号，作为系统测试的一部分。

### **使用 STM32 的 DAC：示例**

以下是使用 **STM32 的 DAC** 输出一个简单的模拟电压的示例。假设我们使用 **STM32F103** 系列，DAC 输出模拟电压到一个引脚，且该引脚连接到一个外部设备（如扬声器）。

#### **1. 配置 DAC 引脚**
   - STM32 的 **PA4** 引脚可以配置为 **DAC1 输出引脚**。
   - 在 STM32CubeMX 中，将 PA4 引脚配置为 DAC 输出，并生成代码。

#### **2. 初始化 DAC 模块**

生成代码后，你需要在 `main.c` 中进行 DAC 的初始化，并设置输出值。

```c
#include "stm32f1xx_hal.h"

// 初始化 DAC
void DAC_Init(void) {
    __HAL_RCC_DAC_CLK_ENABLE();  // 启用 DAC 时钟
    
    DAC_HandleTypeDef hdac;
    hdac.Instance = DAC;  // 使用 DAC 实例
    
    DAC_ChannelConfTypeDef sConfig = {0};
    sConfig.DAC_Trigger = DAC_TRIGGER_NONE;  // 不使用触发器，手动控制输出
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;  // 启用输出缓冲器
    
    HAL_DAC_Init(&hdac);  // 初始化 DAC
    
    // 配置 DAC 通道 1 (DAC1 -> PA4 引脚)
    HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
    
    // 启动 DAC 通道 1
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
    
    // 设置初始输出值为中间电压 (1.65V，假设 Vref = 3.3V)
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);  // 12 位右对齐
}

int main(void) {
    HAL_Init();  // 初始化 HAL 库
    DAC_Init();  // 初始化 DAC
    
    while (1) {
        // 可以在这里修改 DAC 输出的值，实现动态的电压控制
        // 例如生成一个正弦波
    }
}
```

#### **3. 生成正弦波示例**
你可以使用 DAC 输出一个正弦波信号来驱动外部设备（如扬声器），通过在主循环中不断更新 DAC 的输出值：

```c
#include <math.h>

void generate_sine_wave(DAC_HandleTypeDef* hdac) {
    const int amplitude = 2048;  // 正弦波幅度
    const int offset = 2048;     // 使正弦波的电压处于中间位置
    const int steps = 100;       // 正弦波采样点数量
    
    for (int i = 0; i < steps; i++) {
        // 计算正弦波的采样点
        uint32_t dac_value = (uint32_t)(amplitude * sin(2 * M_PI * i / steps) + offset);
        // 设置 DAC 输出值
        HAL_DAC_SetValue(hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
        HAL_Delay(10);  // 控制正弦波频率
    }
}

int main(void) {
    HAL_Init();  // 初始化 HAL 库
    DAC_Init();  // 初始化 DAC
    
    while (1) {
        generate_sine_wave(&hdac);  // 生成正弦波
    }
}
```

### **DAC 常见问题**

1. **输出电压不正确**：
   - 检查 DAC 的参考电压是否正确（通常为 3.3V）。
   - 检查 DAC 设置的对齐方式是 12 位右对齐还是左对齐，并确保输入的数字值在正确的范围内。

2. **DAC 输出的信号不平稳**：
   - 使用 **输出缓冲器** 来平滑 DAC 输出的电压波形，减少由于负载变化引起的电压波动。

3. **输出信号过慢**：
   - 如果需要高速输出，建议使用 **DMA** 结合 DAC，以自动从内存中读取数据并输出，减少 CPU 的干预。

### **总结**

- **DAC（数模转换器）** 是将数字信号转换为模拟信号的设备，广泛应用于音频输出、信号生成、模拟控制等领域。
- 在 **STM32** 中，DAC 可以输出 0 到 Vref 范围内的模拟电压，并且支持 12 位分辨率，能够产生精细的模拟信号。
- **STM32** 的 DAC 模块可以结合 DMA 自动输出数据，适合生成波形信号（如正弦波、方波）或连续音频数据。
- 通过编程，你可以轻松地使用 DAC 生成各种模拟信号，并控制外部设备。