---
layout: post
title:  "外设"
categories: embed
---

**外设（Peripheral）** 是指嵌入式系统中的硬件模块，用于扩展微控制器（MCU）的功能，使其能够与外部设备交互或实现特定功能。外设可以是集成在 MCU 内部的模块，也可以是连接在 MCU 外部的独立设备。外设在 MCU 中的作用是为系统提供各种 **输入输出**、**通信**、**定时** 和 **数据处理** 功能。

### **MCU 中的常见外设类型**

#### 1. **GPIO（General Purpose Input/Output，通用输入输出）**
   - **GPIO** 是 MCU 中最基础的外设模块，提供可编程的输入输出引脚。每个 GPIO 引脚可以配置为输入或输出，用于读取传感器数据、控制 LED、按键检测等任务。
   - **输入模式**：可以用于读取开关、传感器等设备的状态。
   - **输出模式**：可以用于驱动 LED、继电器等外部设备。

#### 2. **USART/UART（通用异步/同步收发器）**
   - **UART** 是一种常用的异步串行通信接口，用于实现设备之间的数据传输。USART 是 UART 的增强版本，支持同步和异步通信模式。
   - 用于设备与设备之间的数据传输，或者 MCU 与 PC 串口通信。常见应用场景包括调试输出、与传感器或通信模块（如蓝牙、GPS、GSM）通信。

#### 3. **SPI（Serial Peripheral Interface，串行外设接口）**
   - **SPI** 是一种高速全双工通信协议，使用主从模式。常用于 MCU 与外部设备（如显示屏、存储器、传感器、ADC/DAC）之间的通信。
   - SPI 需要 **MOSI（主输出从输入）**、**MISO（主输入从输出）**、**SCLK（时钟线）** 和 **CS（片选）** 引脚。
   
#### 4. **I2C（Inter-Integrated Circuit，集成电路间通信）**
   - **I2C** 是一种常用于短距离设备间通信的双线协议。它通过两根引脚（**SCL**：时钟线，**SDA**：数据线）进行数据传输，支持多主多从设备。
   - 典型应用包括连接 EEPROM、温度传感器、LCD 显示屏和其他低速外设。

#### 5. **ADC（Analog to Digital Converter，模数转换器）**
   - **ADC** 将模拟信号（如温度、光照、压力等传感器的信号）转换为 MCU 可以处理的数字信号。ADC 是模拟输入设备与 MCU 之间的桥梁。
   - STM32 的 ADC 通常具有多通道，能够同时采集多个模拟信号。

#### 6. **DAC（Digital to Analog Converter，数模转换器）**
   - **DAC** 是将 MCU 产生的数字信号转换为模拟信号的外设。DAC 常用于音频输出、模拟控制信号等应用。
   - 典型应用包括控制电压、电流或产生音频信号。

#### 7. **PWM（Pulse Width Modulation，脉宽调制）**
   - **PWM** 是一种用来生成模拟信号的技术，通过改变脉冲信号的占空比来控制电机的速度、LED 的亮度或其他设备的工作状态。
   - PWM 输出广泛应用于电机控制、LED 调光和伺服控制。

#### 8. **CAN（Controller Area Network，控制器局域网）**
   - **CAN** 是一种常用于工业控制和汽车电子中的通信协议，具备强大的实时性和抗干扰能力。它允许多个设备在同一总线上进行通信。
   - 主要用于汽车电子系统（如引擎控制、ABS、防盗系统）和工业自动化。

#### 9. **USB（Universal Serial Bus，通用串行总线）**
   - **USB** 是一种通用的通信接口，广泛用于连接外部设备，如存储设备、键盘、鼠标、音频设备等。MCU 的 USB 接口可以工作在 **设备模式**（如 USB 设备连接到 PC）或 **主机模式**（如 MCU 连接 USB 存储设备）。
   - 在嵌入式系统中，USB 通常用于与计算机交互或通过 OTG 模式控制外设。

#### 10. **定时器（Timer）**
   - 定时器是 MCU 中用于时间控制的外设，可以产生定时中断、计数脉冲或生成 PWM 信号。定时器可以用于多种场景，包括定时任务、信号测量、PWM 生成、脉冲计数等。
   - STM32 的定时器外设支持丰富的功能，如输入捕获、输出比较、PWM 和计数。

#### 11. **RTC（Real-Time Clock，实时时钟）**
   - **RTC** 是一种用于保持日历时间和计时的外设，即使 MCU 断电，RTC 也可以通过电池供电继续工作，保持时间准确。
   - RTC 在需要长期保持时间（如记录事件发生时间、定时任务等）的嵌入式应用中非常重要。

#### 12. **DMA（Direct Memory Access，直接存储器访问）**
   - **DMA** 是一种高效的数据传输机制，允许外设与存储器之间直接进行数据传输，而无需 CPU 参与。这大大提高了系统的性能，尤其在需要快速、大量数据传输的应用中非常有效。
   - 例如，DMA 可用于 **UART、SPI、ADC** 等外设的数据传输，减少 CPU 的负担。

#### 13. **看门狗定时器（Watchdog Timer）**
   - **看门狗定时器** 是一种用于检测和恢复异常状态的外设。它可以在系统进入死循环或长时间无响应时复位 MCU，确保系统能够从异常状态中恢复。
   - 看门狗常用于要求高可靠性的嵌入式系统中，如汽车电子、工业控制等。

#### 14. **EEPROM 或 Flash 存储器**
   - MCU 通常内置 **Flash 存储器**，用于存储程序代码。部分 MCU 也支持 **EEPROM**，用于存储掉电后仍需保存的数据。
   - 一些 MCU 通过 I2C 或 SPI 接口与外部存储器通信，实现数据的非易失性存储。

### **外设的使用场景**

1. **传感器数据采集**：
   - 通过 **ADC** 将传感器的模拟信号（如温度、压力、湿度等）转换为数字信号，存储在 MCU 的内存中。
   - 通过 **I2C** 或 **SPI** 接口与数字传感器通信，读取数据。

2. **电机控制**：
   - 使用 **PWM** 控制电机的速度和方向。
   - 通过 **定时器** 进行精确的时间控制或生成脉冲信号。

3. **显示屏控制**：
   - 通过 **SPI** 接口与显示屏（如 OLED、TFT）通信，控制显示内容。
   - 通过 **GPIO** 控制 LCD 屏幕的背光或与触摸屏进行交互。

4. **通信和数据传输**：
   - 使用 **UART** 进行串口通信，用于调试、数据传输或控制外部设备。
   - 使用 **CAN** 总线实现多个设备间的实时通信，常用于汽车电子和工业控制。
   - 使用 **USB** 连接外部存储设备或与计算机进行数据交换。

5. **实时控制和任务调度**：
   - 通过 **定时器** 实现周期性的任务调度。
   - 使用 **RTC** 实现长时间的计时任务和定时操作，如每天定时执行某个任务。

6. **数据存储和掉电保持**：
   - 通过 **Flash** 或外部 **EEPROM** 存储关键数据，掉电后数据仍然保持。

7. **低功耗应用**：
   - 使用 **RTC** 在低功耗模式下保持时间，并定时唤醒 MCU 进行任务处理。
   - 通过 **DMA** 和外设协作，减少 CPU 的干预，降低系统功耗。

### **如何在 STM32 中使用外设**

在 STM32 微控制器中，外设可以通过 **寄存器直接编程** 或 **使用 HAL 库** 进行配置和操作。以下是使用 **STM32CubeMX** 和 **HAL 库** 配置和使用外设的基本步骤：

1. **使用 STM32CubeMX 配置外设**：
   - 打开 **STM32CubeMX**，选择目标芯片。
   - 在外设配置选项中启用需要的外设（如 GPIO、USART、ADC 等），并设置相关参数（如波特率、采样率、I

/O 引脚等）。
   - 生成初始化代码并导入到 **STM32CubeIDE** 中。

2. **在代码中使用 HAL 库初始化外设**：
   - 调用自动生成的初始化函数（如 `MX_USART1_UART_Init()` 或 `MX_ADC1_Init()`），配置外设的参数。
   - 使用 HAL 库函数执行外设操作（如 `HAL_UART_Transmit()`、`HAL_ADC_Start()`）。

### **总结**

**外设** 是嵌入式系统中提供输入输出、通信、数据处理和控制功能的硬件模块。常见的外设包括 GPIO、USART、SPI、I2C、ADC、DAC、PWM、USB、CAN 等。外设使 MCU 能够与外部设备交互并实现复杂的控制任务。通过使用 STM32 的外设，开发者可以轻松构建多种嵌入式应用，从传感器数据采集到电机控制再到通信和数据存储。