---
layout: post
title:  "串口"
categories: embed
---

**串口（Serial Port）**，也称为 **串行接口**，是一种通过一根数据线（或两根数据线）进行数据传输的通信接口。它是嵌入式系统和计算机中非常常见的通信方式，适合短距离和中速的数据传输。

串口通过 **逐位发送** 数据的方式工作，通常使用两根线——**发送线（TX）** 和 **接收线（RX）**，有时还会使用控制信号线来管理数据的流动。串口可以分为 **同步** 和 **异步** 两种类型，而在嵌入式系统中，最常见的是异步串行通信，即 **UART（通用异步收发器）**。

### **串口的基本概念**

#### **串行通信**
- **串行通信** 是指数据 **一位一位** 通过一根数据线发送。与并行通信相比，串行通信需要的引脚较少，布线也更加简单。
- 数据通过 **起始位**、**数据位**、**校验位（可选）** 和 **停止位** 传输。

#### **异步串行通信**
- 在 **异步通信** 中，传输双方不共享时钟信号，而是通过波特率来保持同步。数据传输由起始位标识帧的开始，并使用停止位标识帧的结束。
- **UART** 是最常见的异步串行通信协议。

#### **串口的关键参数**
1. **波特率（Baud Rate）**：
   - 波特率指每秒传输的比特数（bps），常见的波特率有 9600、19200、115200 等。波特率越高，数据传输速率越快。
   
2. **数据位**：
   - 一帧数据中实际传输的数据位数，通常为 **7 位** 或 **8 位**。

3. **停止位**：
   - 标识一帧数据的结束，通常为 **1 位** 或 **2 位**。

4. **校验位**（可选）：
   - 用于检测数据传输中的错误，校验方式可以是 **奇校验**、**偶校验**，或 **无校验**。

5. **流控**：
   - 控制数据传输的机制。分为 **硬件流控**（RTS/CTS） 和 **软件流控**（XON/XOFF）。硬件流控使用额外的信号线来控制数据的传输，防止数据丢失。

### **串口通信的工作流程**

1. **启动传输**：发送方通过 **TX 引脚** 发送数据，数据以帧的形式发送，每帧数据由起始位、数据位、校验位（可选）和停止位组成。
   
2. **接收数据**：接收方通过 **RX 引脚** 接收数据。接收方根据约定的波特率和帧结构正确接收数据，并可以进行校验，确保数据的完整性。

3. **同步**：由于是异步通信，双方通过预先约定的波特率同步，接收方根据起始位检测到数据的到来，并以约定的速率读取数据。

### **串口通信的硬件接口**

#### **常见的串口类型**：
1. **RS-232**：
   - RS-232 是最常见的串行通信标准，主要用于 PC 与外部设备的连接，典型的波特率为 9600 bps。RS-232 的电平标准较高，通常使用 ±12V 信号。
   
2. **RS-485**：
   - RS-485 是工业控制系统中常用的标准，支持更长距离（1000 米以上）的通信，常用于多设备网络中。它支持多点通信（多主多从），信号电平为差分信号，抗干扰能力强。

3. **TTL 电平串口**：
   - 在嵌入式系统中，常使用 **TTL 电平**（0V 和 3.3V 或 5V）的串口通信。**UART** 通常是基于 TTL 电平的，适合短距离、低功耗的通信应用。

#### **典型的串口引脚**
- **TX（Transmit）**：数据发送引脚，负责将 MCU 内部的数据通过串口发送出去。
- **RX（Receive）**：数据接收引脚，负责接收从外部发送过来的串口数据。
- **GND（Ground）**：地线，连接双方的共同参考电位。

### **串口的应用场景**

1. **调试输出**：
   - 串口是嵌入式系统中常用的调试工具。开发者通过 UART 与计算机连接，使用串口调试工具（如 **PuTTY**、**Tera Term**）监视 MCU 输出的调试信息，从而排查问题。

2. **设备通信**：
   - MCU 可以通过串口与各种外部设备进行通信，例如 **GPS 模块**、**蓝牙模块**、**GSM 模块** 等，串口在这些场景中广泛应用。

3. **工业通信**：
   - **RS-485** 通常用于工业自动化和控制系统，能够实现多设备之间的长距离通信，且具有良好的抗干扰能力。

4. **计算机串口通信**：
   - 通过 **USB 转串口工具**，可以将 MCU 与计算机连接，使用串口调试工具进行数据传输和调试。

### **STM32 中的串口（UART）使用**

在 **STM32** 微控制器中，**USART** 外设可以配置为 **UART 模式**，实现异步串行通信。开发者可以通过 STM32 的 **UART 外设** 与外部设备通信，如与计算机、传感器、模块等。

#### **STM32 使用串口的基本步骤**：

1. **使用 STM32CubeMX 配置 UART**：
   - 打开 **STM32CubeMX**，选择目标芯片（如 **STM32F103C8T6**）。
   - 在外设配置中启用 **USART1**，设置波特率（如 115200 bps）、数据格式（8N1，8 位数据、无校验、1 位停止位）。
   - 生成代码，并在 **STM32CubeIDE** 中打开项目。

2. **初始化 UART 外设**：
   - `MX_USART1_UART_Init()` 函数会在 `main.c` 中初始化 UART，配置波特率、数据位、停止位等参数。

   ```c
   #include "main.h"
   #include "usart.h"

   uint8_t txData[] = "Hello, UART!\r\n";
   uint8_t rxData[10];

   int main(void) {
       HAL_Init();
       SystemClock_Config();
       MX_USART1_UART_Init();

       while (1) {
           // 发送数据
           HAL_UART_Transmit(&huart1, txData, sizeof(txData) - 1, HAL_MAX_DELAY);
           
           // 接收数据
           HAL_UART_Receive(&huart1, rxData, 10, HAL_MAX_DELAY);
       }
   }
   ```

3. **通信测试**：
   - 将 STM32 的 **TX**、**RX** 引脚通过 **USB 转串口模块** 连接到计算机，使用串口调试工具（如 **PuTTY**）与 STM32 进行数据通信。

### **串口的常见问题**

1. **波特率不匹配**：
   - 如果发送方和接收方的波特率不匹配，数据将无法正确接收，可能会导致乱码或通信失败。确保双方设置相同的波特率。

2. **接收超时**：
   - 在接收模式下，如果未能及时接收到数据，可能会发生接收超时。可以设置超时时间来处理这个问题。

3. **数据丢失**：
   - 如果数据传输速率较快，接收方可能无法及时处理，导致数据丢失。可以通过 **硬件流控（RTS/CTS）** 或 **DMA** 提高传输效率，减少数据丢失。

### **总结**

**串口** 是嵌入式系统中非常常见的通信方式，适合中低速的数据传输。通过串口，MCU 可以与外部设备、模块、计算机进行数据交互。**UART** 是最常见的异步串行通信协议，在 STM32 微控制器中，开发者可以轻松配置和使用串口进行调试和设备通信。