---
layout: post
title:  "SPI"
categories: embed
---

**SPI (Serial Peripheral Interface)** 是一种同步串行通信协议，广泛应用于嵌入式系统中，用于在微控制器和外部设备（如传感器、显示屏、存储器等）之间进行高速数据传输。与 **UART** 不同，**SPI** 是一种**同步**通信协议，这意味着数据的传输由一个共享的时钟信号（clock signal）同步控制。

### 1. **SPI 的基础概念**
**SPI** 是一种 **全双工**、**主从模式**的通信协议。它允许数据同时在主设备和从设备之间传输。主设备（Master）控制通信过程，生成时钟信号，并发起数据传输。从设备（Slave）响应主设备的命令。

#### **基本引脚**：
SPI 通常使用 4 根引脚来实现通信：
- **SCLK (Serial Clock)**：主设备生成的时钟信号，用于同步数据传输。
- **MOSI (Master Out Slave In)**：主设备发送数据，从设备接收数据的引脚。
- **MISO (Master In Slave Out)**：从设备发送数据，主设备接收数据的引脚。
- **SS/CS (Slave Select/Chip Select)**：从设备使能引脚，主设备通过拉低此引脚来选择要通信的从设备。

SPI 是一种 **多从通信协议**，多个从设备可以连接到同一个主设备。每个从设备都通过单独的 **CS** 引脚被选择，主设备在通信时拉低相应从设备的 **CS** 引脚。

### 2. **SPI 的工作原理**
SPI 的通信是由时钟信号驱动的。主设备负责控制时钟，并发起数据传输。数据通过 **MOSI** 和 **MISO** 引脚传输，时钟信号用于同步数据的采样和发送。

#### **时钟相位与极性**
SPI 的时钟有两个重要的配置项：**时钟极性（CPOL）** 和 **时钟相位（CPHA）**。这两个参数决定了数据何时采样，以及时钟信号在何时作用。
- **CPOL**：决定时钟在空闲状态下的电平。`CPOL = 0` 时，空闲时钟为低电平；`CPOL = 1` 时，空闲时钟为高电平。
- **CPHA**：决定数据在时钟的上升沿或下降沿采样。`CPHA = 0` 时，在第一个时钟沿采样；`CPHA = 1` 时，在第二个时钟沿采样。

#### **数据传输过程**：
1. 主设备拉低选中的从设备的 **CS** 引脚，通知从设备准备通信。
2. 主设备生成 **SCLK**，每个时钟周期都会在 **MOSI** 上发送一个位，同时从 **MISO** 上读取一个位。
3. 通信完成后，主设备拉高 **CS**，终止当前的通信。

### 3. **SPI 的优缺点**

#### **优点**：
- **高速传输**：SPI 是高速通信协议，常用于需要快速传输数据的场景，如显示屏驱动、存储器读取等。
- **全双工**：数据可以同时在两条线路上传输，支持全双工通信。
- **简单协议**：SPI 不需要复杂的握手和地址机制，因此硬件实现简单，传输效率高。

#### **缺点**：
- **多引脚占用**：每个从设备都需要独立的 **CS** 引脚，因此当系统中有多个从设备时，引脚占用量增加。
- **没有错误检测机制**：与 I2C 或 CAN 总线不同，SPI 没有内置的错误检测机制，数据传输的完整性需要通过其他方式保证。
- **短距离传输**：SPI 通常适用于较短的通信距离。

### 4. **SPI 的应用场景**
SPI 由于其高速、全双工的特点，广泛应用于以下场景：
- **传感器**：如温度传感器、加速度计、气压传感器等，利用 SPI 与微控制器进行数据传输。
- **显示屏**：如 OLED、TFT 显示屏，通过 SPI 接口接收图像数据。
- **存储器**：如 EEPROM、Flash 存储器，用于快速存储数据和读取。
- **音频设备**：许多音频编解码器通过 SPI 接口与微控制器通信。

### 5. **SPI 与其他通信协议的对比**

#### **SPI vs I2C**
- **引脚数**：SPI 需要至少 4 根引脚，而 I2C 只需要 2 根引脚（SCL 和 SDA）。
- **速度**：SPI 的数据传输速率通常高于 I2C，SPI 适合高速数据传输。
- **通信模式**：SPI 是全双工的，而 I2C 是半双工的。SPI 支持同时发送和接收数据，I2C 则不能。
- **多设备支持**：I2C 本身支持多主多从，所有设备都连接在同一总线上，而 SPI 需要为每个从设备提供单独的 **CS** 引脚。

#### **SPI vs UART**
- **时钟信号**：SPI 是同步通信协议，有时钟信号控制，而 UART 是异步通信协议，无需时钟。
- **引脚数**：SPI 通常需要 4 根引脚，而 UART 只需要 2 根（TX 和 RX）。
- **速度和传输效率**：SPI 通常比 UART 速度更快，因为 SPI 可以通过时钟同步以更高的速率传输数据。

### 6. **SPI 示例：与存储器通信**

在嵌入式系统中，通过 SPI 访问存储设备（如 Flash 存储器）是一个常见的应用场景。以下是通过 SPI 写入数据到 Flash 存储器的简单伪代码示例：

```c
#define CS_PIN  10

void SPI_Write(uint8_t address, uint8_t data) {
    digitalWrite(CS_PIN, LOW);        // 选择从设备（CS 拉低）
    SPI_Transfer(address);            // 发送存储地址
    SPI_Transfer(data);               // 发送数据
    digitalWrite(CS_PIN, HIGH);       // 结束通信（CS 拉高）
}

uint8_t SPI_Transfer(uint8_t data) {
    // 发送和接收一个字节
    SPDR = data;
    while(!(SPSR & (1<<SPIF)));       // 等待传输完成
    return SPDR;                      // 返回接收到的数据
}
```

在这个例子中，微控制器通过 SPI 接口向 Flash 存储器写入一个字节的数据。`SPI_Transfer` 函数用于发送数据并接收响应，`CS_PIN` 用于选择目标从设备。

### 7. **SPI 在嵌入式系统中的实现**

SPI 通常由硬件模块来实现，主流的微控制器（如 STM32、AVR、PIC 等）都内置了 SPI 控制器，通过配置寄存器即可控制 SPI 的通信参数，如波特率、时钟相位和极性、数据位数等。

此外，开发者还可以使用 **软件 SPI** 实现 SPI 通信，这种方式不依赖硬件 SPI 控制器，但由于速度较慢，通常只用于简单、低速的应用场景。

### 总结

**SPI** 是一种高速、全双工、同步的通信协议，适合短距离、需要快速数据传输的嵌入式设备之间的通信。其简单的通信方式、灵活的配置和多从设备支持使其成为微控制器与外设通信的常用选择。SPI 的应用场景广泛，从传感器数据传输到存储设备读写，几乎涵盖了所有需要高效、可靠通信的嵌入式系统。