---
layout: post
title:  "UART"
categories: embed
---

**UART (Universal Asynchronous Receiver/Transmitter)** 是一种常见的串行通信协议，广泛应用于嵌入式系统中，用于实现设备之间的低速、短距离通信。UART 是异步通信的典型例子，这意味着发送和接收双方不依赖共享的时钟信号。以下是对 UART 的详细说明：

### 1. **UART 的基础概念**

**UART** 是一个硬件模块，负责实现串行通信。其主要作用是将数据从并行格式转换为串行格式（发送时），以及将串行数据转换回并行格式（接收时）。UART 通常嵌入在微控制器或处理器中。

UART 的通信方式为全双工，即可以同时进行数据的发送和接收。常见的通信速率范围在 9600 波特率到 115200 波特率。

#### UART 通信的两个基本部分：
- **发送器（Transmitter）**：负责将并行数据转换为串行数据流，通过发送引脚（TX）传输。
- **接收器（Receiver）**：负责将接收到的串行数据流还原为并行数据，通过接收引脚（RX）接收数据。

### 2. **UART 的工作原理**

UART 的工作原理是通过异步方式传输数据。数据按照位的顺序依次传输，没有共享的时钟信号来同步发送方和接收方。为了确保通信正常，UART 使用以下机制：

#### 数据帧结构：
- **起始位（Start Bit）**：数据帧的起始位，用来通知接收方即将传输数据。UART 通常通过将线路从默认的高电平拉低来表示开始。
- **数据位（Data Bits）**：通常是 5 到 9 位的数据。最常见的是 8 位，表示发送一个字节的数据。
- **奇偶校验位（Optional Parity Bit）**：用于错误检测。奇偶校验位是可选的，可以帮助检测数据传输中的错误。
- **停止位（Stop Bit）**：表示数据帧的结束。停止位通常为 1 位或 2 位。

#### 流程：
1. **发送数据**：发送方 UART 将并行数据（如 8 位的字节）转换为串行数据流，并按照数据帧结构发送到接收方。
2. **接收数据**：接收方 UART 读取串行数据流，并按照数据帧结构将其还原为并行数据，然后将数据提供给处理器。

### 3. **UART 与波特率**

波特率（Baud Rate）是指每秒传输的符号数，通常用作数据传输速率的度量。对于 UART，波特率通常以位/秒（bps）为单位，如 9600、115200 等。发送方和接收方的波特率必须一致，才能确保数据正确传输。

#### 常见波特率：
- 9600 bps
- 19200 bps
- 38400 bps
- 57600 bps
- 115200 bps

### 4. **UART 的优缺点**

#### 优点：
- **简单易用**：UART 通信不需要复杂的同步机制，因此开发和调试相对简单。
- **低成本**：由于 UART 使用较少的引脚和硬件资源，特别适合嵌入式系统中的低成本应用。
- **可靠性高**：支持奇偶校验机制，可以提供简单的错误检测能力。

#### 缺点：
- **速度有限**：与其他高速通信接口（如 SPI 或 I2C）相比，UART 的数据传输速率相对较低。
- **距离有限**：由于信号的衰减，UART 通信的有效距离通常在几米内。
- **多设备支持有限**：UART 是点对点的通信方式，不适合多设备同时通信。

### 5. **UART 的应用场景**

#### 5.1 **嵌入式系统**
在嵌入式系统中，UART 常用于微控制器之间或微控制器与外设之间的通信。例如：
- **微控制器与传感器**：许多传感器（如 GPS 模块、温度传感器）通过 UART 向微控制器传递数据。
- **调试和编程接口**：开发过程中，UART 也常用于调试和上传代码到嵌入式设备。

#### 5.2 **PC 通信**
UART 还广泛应用于 PC 与嵌入式设备之间的通信，典型应用包括：
- **USB 转 UART**：通过 USB 转 UART 适配器，PC 可以通过串口与嵌入式设备进行通信。
- **串口调试**：使用 UART 与嵌入式设备进行串口通信，可以实时查看设备的运行状态或进行调试。

#### 5.3 **物联网设备**
在物联网（IoT）中，UART 被广泛应用于设备之间的数据传输，如：
- **Wi-Fi 模块通信**：如 ESP8266/ESP32 模块与主控板之间的通信。

### 6. **UART 与其他通信协议的对比**

#### **UART vs SPI**
- **通信模式**：UART 是异步的，而 SPI 是同步的（依赖时钟信号）。
- **引脚数**：UART 仅需 2 条引脚（TX 和 RX），而 SPI 需要至少 4 条引脚（MISO、MOSI、SCLK、SS）。
- **速度**：SPI 的数据传输速率比 UART 高得多。

#### **UART vs I2C**
- **通信模式**：UART 是点对点通信，而 I2C 是多主多从通信协议。
- **引脚数**：I2C 使用 2 根线（SCL 和 SDA），而 UART 使用 2 条引脚（TX 和 RX）。
- **速度**：I2C 的速度比 UART 快，但比 SPI 慢。

### 7. **UART 的实现与硬件接口**

#### 硬件实现：
UART 通常通过微控制器内部的硬件模块来实现，典型的微控制器（如 STM32、Arduino、PIC）都提供了 UART 硬件模块。通过配置相关寄存器，开发者可以控制波特率、数据位、停止位等参数。

#### 软件库：
对于一些不具备硬件 UART 模块的系统，也可以通过软件实现 UART 通信（即“软串口”），但速度和精度较低。

### 总结

**UART** 是嵌入式系统中最基础的通信协议之一，适合短距离、低速的点对点通信。由于其简单性和高效性，UART 在传感器数据传输、微控制器调试、外设通信等方面被广泛使用。掌握 UART 通信的配置和调试，对于嵌入式开发者来说是非常重要的技能。