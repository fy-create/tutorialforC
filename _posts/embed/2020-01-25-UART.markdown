---
layout: post
title:  "UART"
categories: embed
---

**UART（Universal Asynchronous Receiver/Transmitter，通用异步收发器）** 是一种广泛应用于嵌入式系统中的串行通信接口，用于实现设备间的异步数据传输。**UART** 仅支持异步通信，不需要时钟线，数据通过一根传输线（TX）和一根接收线（RX）进行传输。

UART 通信在嵌入式开发中非常常见，通常用于调试输出、与传感器或其他外设通信、与计算机通过串口工具通信等。

### **UART 的基本概念**

UART 是一种 **异步通信协议**，意味着发送方和接收方之间不需要共享时钟。两者需要预先约定好 **波特率（Baud Rate）**，以确保同步传输。数据通过 **串行传输** 的方式，一位一位地发送到接收端。

#### **UART 的帧格式**

每个 UART 数据帧包含以下几个部分：
1. **起始位**：通常为 **1 位**，表示数据帧的开始，逻辑电平为 **低**。
2. **数据位**：通常为 **8 位**，也可以为 7 位或 9 位，表示实际传输的数据信息。
3. **校验位（可选）**：用于检测数据传输中的错误，通常使用奇偶校验位（Paritiy Bit）。
4. **停止位**：通常为 **1 或 2 位**，表示一帧数据的结束，逻辑电平为 **高**。

#### **UART 通信参数**

- **波特率**：UART 通信双方必须以相同的波特率进行数据传输。常见的波特率有 9600 bps、115200 bps 等。
- **数据位**：指一帧中实际的数据信息，常见的为 8 位。
- **停止位**：用于标识一帧的结束，常见为 1 位或 2 位。
- **校验位**：用于检测数据传输中的错误，通常选择 **无校验**、**奇校验** 或 **偶校验**。

### **UART 的工作原理**

UART 通过串行方式发送数据，使用 **TX 引脚** 发送数据，使用 **RX 引脚** 接收数据。UART 没有时钟线，因此发送方和接收方通过约定的波特率来确保数据传输的同步性。

#### **异步通信**：
在异步通信中，数据的传输和接收不需要时钟信号。发送方会在约定的波特率下发送数据，接收方会根据该波特率同步接收数据。由于没有时钟同步，波特率的设置和精度非常重要。

#### **简单的数据传输过程**：
1. 发送方在 **TX 引脚** 上发送一帧数据，数据帧由起始位、数据位、校验位和停止位组成。
2. 接收方通过 **RX 引脚** 接收该数据帧，并验证数据的完整性（如果有校验位），然后将数据存入接收缓存。

### **STM32 中的 UART 外设**

在 **STM32** 微控制器中，UART 是非常重要的外设，用于串行通信。STM32 的 **USART（通用同步/异步收发器）** 可以工作在 **异步模式（UART 模式）** 下，支持标准的 UART 通信。STM32 的 UART 外设通常与 **DMA** 和 **中断** 配合使用，以提高数据传输效率。

#### **STM32 UART 外设的主要功能**：
1. **波特率可编程**：波特率可以根据需求进行编程设置，常见的波特率为 9600、19200、115200 等。
2. **支持 DMA**：可以使用 **DMA**（直接存储器访问）进行大数据量的传输，减少 CPU 参与，提高效率。
3. **硬件流控制**：支持 **RTS（请求发送）** 和 **CTS（清除发送）** 流控制，用于避免数据丢失。
4. **中断支持**：支持发送和接收完成中断，适用于实时性较高的应用场景。
5. **可选的校验模式**：可以设置奇校验、偶校验或者无校验。

### **UART 的应用场景**

1. **串口调试**：
   - UART 是嵌入式系统中最常用的调试工具，开发者通过 UART 输出调试信息到电脑终端，进行问题排查。

2. **设备通信**：
   - UART 常用于连接外部模块（如 **GPS 模块**、**蓝牙模块**、**GSM 模块** 等），进行串行数据的通信。

3. **与计算机通信**：
   - STM32 可以通过 UART 与计算机串口通信，使用 USB 转串口工具进行连接。计算机端可以使用串口调试软件（如 **PuTTY**、**Tera Term**）进行数据收发。

### **STM32 UART 使用示例**

以下是使用 **STM32CubeMX** 和 **HAL 库** 实现 UART 串行通信的简单示例。我们将 STM32 配置为通过 UART 发送和接收数据，并在串口终端工具上与 STM32 进行交互。

#### **1. 使用 STM32CubeMX 配置 UART**

1. 打开 **STM32CubeMX**，选择目标芯片（如 **STM32F103C8T6**）。
2. 在外设配置中启用 **USART1** 或 **UART1**，设置波特率为 **115200 bps**，数据格式为 **8N1**（8 个数据位，无校验，1 个停止位）。
3. 将 **TX** 和 **RX** 引脚映射到适当的引脚（如 **PA9** 和 **PA10**）。
4. 生成代码并导入 **STM32CubeIDE**。

#### **2. 初始化 UART**

在生成的项目中，`main.c` 中的 `MX_USART1_UART_Init()` 函数会自动生成 UART 的初始化代码。此函数配置波特率、数据位、停止位等通信参数。

```c
#include "main.h"
#include "usart.h"

uint8_t txData[] = "Hello, UART!\r\n";  // 要发送的数据
uint8_t rxData[10];  // 接收缓冲区

int main(void) {
    HAL_Init();  // 初始化 HAL 库
    SystemClock_Config();  // 配置系统时钟
    MX_USART1_UART_Init();  // 初始化 UART1

    while (1) {
        // 发送数据
        HAL_UART_Transmit(&huart1, txData, sizeof(txData) - 1, HAL_MAX_DELAY);

        // 接收数据
        HAL_UART_Receive(&huart1, rxData, 10, HAL_MAX_DELAY);
        
        // 可以在此处处理接收到的数据
    }
}
```

#### **3. 使用 HAL 库进行通信**

- **HAL_UART_Transmit()**：发送数据到串口。
- **HAL_UART_Receive()**：接收串口数据。

该代码通过 UART 发送 `"Hello, UART!"` 到计算机，并等待接收 10 字节的数据。

#### **4. 在计算机上使用串口工具**

通过 **USB 转串口工具** 将 STM32 的 UART 引脚连接到 PC，并使用串口调试软件（如 **PuTTY**、**Tera Term**）查看 STM32 发送的数据并发送数据到 STM32。配置串口工具的波特率和其他参数与 STM32 的 UART 配置一致（如 115200 bps、8N1）。

### **UART 的高级功能**

1. **DMA 传输**：
   - 使用 **DMA**（Direct Memory Access，直接存储器访问）可以极大提高数据传输效率，尤其是大数据量的传输场景。DMA 可以自动管理数据传输过程，减轻 CPU 负担。

2. **中断模式**：
   - UART 支持中断模式，在发送或接收完成时触发中断。中断模式适合实时性要求较高的应用场景，如需在特定时间段内处理数据。

3. **硬件流控制**：
   - UART 可以通过 **RTS/CTS** 实现硬件流控制，防止数据丢失或超出接收方的处理能力。在传输大数据或多设备通信时，硬件流控制非常重要。

### **UART 的常见问题**

1. **波特率不匹配**：
   - UART 通信双方必须使用相同的波特率，否则会导致数据无法正确传输，出现乱码或通信失败。

2. **接收超时**：
   - 如果接收方长时间未收到预期的数据，可能发生接收超时。可以通过设置超时时间或使用中断来处理这个问题。

3. **数据丢失**：
   - 在高波特率下，接收方可能无法及时

处理数据，导致数据丢失。可以通过 **DMA** 或 **流控制** 来解决这个问题。

### **总结**

- **UART（通用异步收发器）** 是嵌入式系统中常用的串行通信接口，用于调试、设备通信以及与计算机进行串口通信。它通过异步方式传输数据，无需共享时钟信号，支持多种通信参数配置。
- STM32 微控制器提供灵活的 UART 外设，支持 DMA、硬件流控制和中断模式，适合大数据量传输和实时通信场景。
- 通过 **STM32CubeMX** 和 **HAL 库**，可以轻松配置和使用 STM32 的 UART 外设，实现高效可靠的串行通信。