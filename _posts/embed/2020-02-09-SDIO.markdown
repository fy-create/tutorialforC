---
layout: post
title:  "SDIO"
categories: embed
---

**SDIO**（Secure Digital Input Output，安全数字输入输出）是一种与 **SD 卡** 及其他 SD 设备进行高速通信的接口协议。在嵌入式系统中，**SDIO** 通常用于连接 **SD 卡**、**Wi-Fi 模块** 等设备，允许快速读写数据。STM32 微控制器中的 **SDIO 外设** 专门用于与 SD 卡或 SDIO 设备进行数据传输。

### **SDIO 在 STM32 中的应用**

在 STM32 微控制器中，**SDIO** 是一个专用外设，支持与 **SD 存储卡** 和 **SDIO 设备**（如 Wi-Fi 模块、蓝牙模块）进行数据通信。SDIO 接口可以实现 **高速** 数据传输，并且与 **DMA（Direct Memory Access）** 配合使用时，能够极大提高数据传输效率，减少 CPU 的负担。

### **SDIO 的工作模式**

1. **SD 卡模式**：
   - SDIO 接口支持与 **SD 卡** 通信，主要用于读写数据。例如，嵌入式系统中的数据存储、文件系统的实现等场景。
   - STM32 支持 **SD 协议** 中的 **1位模式** 和 **4位模式**，后者传输速度更快。

2. **SDIO 设备模式**：
   - SDIO 还支持与其他支持 SDIO 协议的设备进行通信，如带有 SDIO 接口的 **Wi-Fi 模块** 或 **蓝牙模块**。这种模式下，SDIO 接口不仅能传输数据，还可以实现设备的控制和管理。

### **SDIO 通信协议的基本概念**

**SDIO 协议**基于 **SPI（串行外设接口）** 和 **SD 协议**，支持以下两种传输模式：

1. **1位模式**：
   - 通过一条数据线（**DAT0**）进行数据传输，适合较低速的通信。

2. **4位模式**：
   - 使用四条数据线（**DAT0-DAT3**）同时进行数据传输，相比 1 位模式，4 位模式的数据传输速度更快，是 SD 卡的高速模式。

### **SDIO 的引脚及连接**

在 STM32 中，SDIO 接口通常使用 6 条引脚（以及可能的供电和地线），包括：

1. **CMD（命令线）**：用于发送命令和接收响应。
2. **CLK（时钟线）**：提供通信的时钟信号。
3. **DAT0 - DAT3（数据线）**：用于传输数据。在 1 位模式下，仅使用 **DAT0**，而在 4 位模式下使用 **DAT0-DAT3**。

### **SDIO 在 STM32 上的硬件连接**

使用 SD 卡时，通常需要将 STM32 的 **SDIO** 引脚连接到 SD 卡模块的相应引脚。以下是常见的 SDIO 引脚与 SD 卡引脚的对应关系：

| SDIO 引脚 | SD 卡引脚 | 描述          |
| --------- | --------- | ------------- |
| CMD       | CMD       | 命令线         |
| CLK       | CLK       | 时钟线         |
| DAT0      | DAT0      | 数据线 0       |
| DAT1      | DAT1      | 数据线 1       |
| DAT2      | DAT2      | 数据线 2       |
| DAT3      | DAT3      | 数据线 3       |
| GND       | GND       | 地             |
| VDD       | VDD       | 3.3V 电源      |

STM32 的某些型号会预留专用的 SDIO 引脚，这些引脚可以在硬件电路中直接连接到 SD 卡槽或模块，便于与 SD 卡进行通信。

### **SDIO 的速度**

SDIO 的传输速度取决于所选择的模式：
- **1位模式**：速度较慢，适用于较简单的应用。
- **4位模式**：可达到数 MB/s 级别的传输速度，适合需要大数据传输的场景（如文件系统操作、大量数据的读写）。
- **DMA 支持**：STM32 的 SDIO 可以与 **DMA** 配合使用，进一步提升数据传输速度，尤其适用于大数据量传输场景。DMA 会自动管理数据传输，减少 CPU 的参与，提高系统整体效率。

### **STM32 使用 SDIO 操作 SD 卡的示例**

以下是使用 **STM32CubeMX** 配置 SDIO 和 DMA 以读写 SD 卡的简单流程。

#### **1. 使用 STM32CubeMX 配置 SDIO**

1. 打开 **STM32CubeMX**，选择目标 STM32 芯片（如 **STM32F4** 系列）。
2. 在外设配置中，启用 **SDIO** 和 **DMA**，以支持 SD 卡的高速数据传输。
3. 选择 **4-bit SDIO 模式**，以提高数据传输速率。
4. 生成代码，并在 **STM32CubeIDE** 中打开项目。

#### **2. 初始化 SD 卡**

在 `main.c` 文件中初始化 SD 卡模块，并通过 SDIO 接口进行通信。

```c
#include "main.h"
#include "fatfs.h"  // 使用 FATFS 文件系统支持

// SD 卡句柄
SD_HandleTypeDef hsd;

// 初始化 SDIO 接口和 SD 卡
void MX_SDIO_SD_Init(void) {
    hsd.Instance = SDIO;
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
    hsd.Init.BusWide = SDIO_BUS_WIDE_4B;  // 使用 4 位数据总线
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
    hsd.Init.ClockDiv = 2;  // 时钟分频，控制速度
    if (HAL_SD_Init(&hsd) != HAL_OK) {
        // 初始化错误处理
        Error_Handler();
    }
}

// 主函数
int main(void) {
    HAL_Init();  // 初始化 HAL 库
    SystemClock_Config();  // 配置系统时钟
    MX_SDIO_SD_Init();  // 初始化 SDIO 和 SD 卡

    // 使用 FATFS 文件系统操作 SD 卡
    FATFS fs;
    FIL file;
    UINT bw;
    char writeData[] = "Hello, SD Card!";

    // 挂载 SD 卡文件系统
    if (f_mount(&fs, "", 1) == FR_OK) {
        // 创建并写入文件
        if (f_open(&file, "test.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
            f_write(&file, writeData, sizeof(writeData), &bw);
            f_close(&file);
        }
        // 卸载文件系统
        f_mount(NULL, "", 1);
    }

    while (1) {
        // 循环等待
    }
}
```

#### **3. 代码解释**

- **SDIO 初始化**：通过配置 SDIO 的时钟、总线宽度等参数，启用 SDIO 接口，并连接到 SD 卡。
- **FATFS 文件系统**：使用 **FATFS** 文件系统（STM32 的官方文件系统库）来管理 SD 卡的文件和目录。程序演示了如何在 SD 卡上创建一个文件，并写入数据。
- **DMA 支持**：在实际应用中，SDIO 结合 **DMA** 可以大幅提升数据传输速度，尤其是当需要处理大数据量时，DMA 能够自动管理数据传输，减少 CPU 的参与。

### **SDIO 的常见应用**

1. **SD 卡数据存储**：
   - 嵌入式系统中，SD 卡常用于存储传感器数据、日志记录、音频文件、图像等大量数据。SDIO 接口可以以较高的速率读写 SD 卡，并且支持文件系统的操作。
   
2. **Wi-Fi 和蓝牙模块**：
   - 通过 SDIO 接口连接外部 Wi-Fi 或蓝牙模块，实现无线通信。SDIO 的高速传输能力使得它适合处理大量数据的无线通信任务。
   
3. **媒体设备**：
   - 在嵌入式媒体设备中（如音频播放器、摄像头模块等），SDIO 常用于存储或读取大容量的媒体文件（如音频、视频、图片）。

### **SDIO 的常见问题**

1. **时钟和总线宽度配置错误**：
   - 如果 SDIO 的时钟频率或总线宽度配置不正确，可能会导致数据传输速率降低或通信失败。常见错误包括选择过高的时钟频率、未正确配置 4 位数据模式等。

2. **SD 卡识别失败**：
   - 在某些情况下，SD 卡无法正常被识别，可能是因为初始化步骤不正确、卡槽连接不良或卡片本身损坏。需要确保电路设计和 SD 卡插

槽连接正确。

3. **文件系统操作问题**：
   - 当使用 **FATFS** 文件系统时，挂载、读写文件时可能会出现错误，特别是在存储器空间不足或文件系统被损坏的情况下。确保正确格式化 SD 卡，并检查错误处理逻辑。

### **总结**

- **SDIO** 是一种用于与 **SD 卡** 和 **SDIO 设备**（如 Wi-Fi 模块、蓝牙模块等）通信的高速接口，支持 1 位和 4 位传输模式。
- 在 STM32 中，SDIO 接口可以与 **DMA** 协同工作，实现高速的数据传输，特别适合处理大量数据，如存储文件、数据日志记录、媒体存储等。
- 通过 **FATFS 文件系统**，STM32 可以在 SD 卡上进行文件系统操作，实现文件读写和管理。结合 SDIO 和 DMA，能够大幅提高存储器操作的效率和性能。