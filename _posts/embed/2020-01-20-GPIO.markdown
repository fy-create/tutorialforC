---
layout: post
title:  "GPIO"
categories: embed
---

**GPIO（General Purpose Input/Output，通用输入/输出）** 是微控制器（MCU）或处理器中的一种通用接口，用于与外部设备进行数字信号的输入或输出。GPIO 是嵌入式系统中最基础的外设接口之一，广泛应用于与传感器、按键、LED、继电器等外部设备进行交互。

### **GPIO 的基本功能**

1. **输入模式**：GPIO 引脚配置为输入时，外部信号（如按键、传感器的输出信号）可以通过 GPIO 引脚读取，并传递给微控制器。输入信号通常是数字信号，表示 **高电平（1）** 或 **低电平（0）**。
   
2. **输出模式**：GPIO 引脚配置为输出时，微控制器可以通过 GPIO 向外部设备发送数字信号，控制其他电路的工作。例如，控制 LED 的亮灭、驱动继电器等。

3. **中断功能**：GPIO 可以配置为 **中断模式**，当输入引脚检测到信号的变化（如上升沿或下降沿）时，可以触发中断，从而让微控制器及时响应外部事件。

4. **复用功能**：很多 GPIO 引脚在现代微控制器上是 **多功能的**，可以根据需求配置为其他外设接口的引脚，如 **USART**、**I2C**、**SPI** 等。

5. **推挽输出与开漏输出**：
   - **推挽输出（Push-Pull）**：GPIO 引脚可以输出高电平或低电平，常用于驱动负载或直接控制其他数字电路。
   - **开漏输出（Open-Drain）**：GPIO 引脚只能输出低电平，无法主动输出高电平。当需要高电平时，通常通过外部上拉电阻将引脚拉高。开漏输出常用于与多个设备共用数据线的场景，如 I2C 总线。

### **GPIO 的工作模式**

1. **输入模式**：
   - 在 **输入模式** 下，GPIO 引脚可以接收外部设备发送的信号，如传感器的输出、按键状态等。
   - **上拉/下拉电阻**：为了确保输入状态稳定，GPIO 引脚可以启用 **上拉电阻** 或 **下拉电阻**。上拉电阻将引脚连接到高电平，确保无输入时保持高电平状态；下拉电阻则连接到低电平。

2. **输出模式**：
   - 在 **输出模式** 下，微控制器通过设置 GPIO 的输出电平来控制外部设备。例如，输出高电平点亮 LED，输出低电平关闭 LED。
   
3. **中断模式**：
   - 在 **中断模式** 下，GPIO 引脚配置为输入状态，同时监测信号的变化。常见的中断触发条件包括 **上升沿**（低电平到高电平的变化）、**下降沿**（高电平到低电平的变化）以及 **双边沿**（无论信号是上升还是下降，都会触发中断）。
   - 这种模式常用于检测按键按下、传感器状态变化等需要立即响应的事件。

4. **复用功能模式**：
   - 一些 GPIO 引脚可以复用为其他外设的功能引脚，例如串行通信的 **TX/RX**，I2C 的 **SDA/SCL**，SPI 的 **MOSI/MISO/SCK** 等。在这种模式下，GPIO 引脚不再作为通用的输入输出引脚，而是为特定的外设服务。

### **GPIO 配置与使用**

#### **1. 在 STM32 中使用 GPIO**

STM32 微控制器具有强大的 GPIO 控制能力。STM32 的每个 GPIO 引脚可以独立配置为输入、输出、中断或其他外设功能，并支持多种电平模式和输出类型。

##### **使用 STM32CubeMX 配置 GPIO**
1. **选择 GPIO 引脚**：在 STM32CubeMX 中选择需要配置的 GPIO 引脚，点击它并选择功能，如输入、输出或复用功能。
2. **配置模式**：设置 GPIO 引脚的工作模式（如输入、输出或中断），并选择是否启用上拉/下拉电阻。
3. **生成代码**：点击生成代码按钮，STM32CubeMX 将自动生成初始化代码，包括 GPIO 的配置函数。

##### **GPIO 初始化示例代码**
以下代码展示了如何初始化 GPIO 并控制一个 LED。

```c
#include "main.h"

void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // 使能 GPIO 时钟
    __HAL_RCC_GPIOC_CLK_ENABLE();

    // 配置 PC13 引脚为输入模式，用于读取按键状态
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    // 配置 PA5 引脚为输出模式，用于控制 LED
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // 推挽输出
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

int main(void) {
    HAL_Init();        // 初始化 HAL 库
    MX_GPIO_Init();    // 初始化 GPIO

    while (1) {
        // 读取按键状态（假设按键接在 PC13）
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
            // 按键按下时点亮 LED
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
        } else {
            // 按键松开时熄灭 LED
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
        }
    }
}
```

#### **2. 常见的 GPIO 操作**
- **读取引脚状态**：`HAL_GPIO_ReadPin()` 用于读取 GPIO 引脚的当前状态（高电平或低电平）。
- **设置引脚状态**：`HAL_GPIO_WritePin()` 用于设置 GPIO 引脚的输出状态（高电平或低电平）。
- **切换引脚状态**：`HAL_GPIO_TogglePin()` 用于切换 GPIO 引脚的状态。

### **GPIO 的应用场景**

1. **按键输入**：
   - GPIO 常用于检测按键的状态。在按键被按下时，GPIO 引脚检测到低电平信号，程序即可响应用户的按键操作。

2. **LED 控制**：
   - GPIO 常用于驱动 LED，通过输出高电平或低电平来控制 LED 的亮灭。这是 GPIO 最常见的应用之一。

3. **继电器控制**：
   - GPIO 可以驱动继电器，控制大功率设备的开关。通过设置 GPIO 引脚的输出状态，控制继电器的通断。

4. **传感器信号读取**：
   - GPIO 作为输入引脚，可以读取数字传感器（如温度、湿度、光强传感器）的信号，获取环境信息。

5. **中断响应**：
   - GPIO 配置为中断模式时，能够及时响应外部事件，如按键按下、传感器信号变化等，特别适合对时间敏感的应用场景。

6. **通信接口**：
   - 许多嵌入式系统中，GPIO 可以复用为其他通信协议的接口，如 I2C、SPI、UART 等，作为外设的通信引脚与其他设备进行数据交换。

### **GPIO 的优点与缺点**

#### **优点**：
- **灵活性**：GPIO 引脚可以根据需求配置为输入、输出或中断，功能多样，适应各种应用场景。
- **简单易用**：通过简单的配置即可实现基本的信号控制，非常适合嵌入式系统中的基础外设控制。
- **成本低**：GPIO 是嵌入式系统的基础外设，通常不需要额外硬件支持，易于实现。

#### **缺点**：
- **驱动能力有限**：GPIO 的输出电流有限，不能直接驱动大功率负载，如电机或高功率灯，通常需要通过继电器或驱动电路来控制大功率设备。
- **速度限制**：GPIO 通常不适合高速信号的传输，适合用于低速控制信号或简单数据的传输。

### **总结**

**GPIO** 是嵌入式系统中的基础接口，用于与外部设备进行 **输入/输出控制**。通过配置 GPIO 引脚，微控制器可以读取外部设备的状态（如传感器、按键），或通过输出信号控制外部设备（如 LED、继电器）。GPIO 的多功能性和简单易用性使其成为嵌入式系统中最

常用的接口之一。在 STM32 微控制器中，GPIO 的配置可以通过 **STM32CubeMX** 工具轻松完成，使用 **HAL 库** 进行高效编程。