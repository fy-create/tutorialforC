---
layout: post
title:  "TIM"
categories: embed
---

**TIM**（Timer，定时器）是微控制器（MCU）中的一个关键外设模块，用于处理与时间相关的任务，如精确的时间延迟、事件计数、脉冲宽度调制（PWM）信号生成、外部事件捕获等。STM32 微控制器中的定时器模块功能非常强大，它可以用于多种应用场景，如电机控制、音频信号处理、通信协议的时间控制、LED 亮度调节等。

### **STM32 中 TIM（定时器）的种类**

STM32 微控制器（如 STM32F103C8T6）通常具有多个定时器，每个定时器有特定的用途。这些定时器分为以下几类：

1. **基础定时器**（Basic Timer）
   - 例如 **TIM6** 和 **TIM7**。
   - 这些定时器比较简单，主要用于周期性中断或生成时间基准。
   - 它们不具备输入捕获或输出比较功能，主要用于软件计时。

2. **通用定时器**（General-Purpose Timer）
   - 例如 **TIM2**、**TIM3**、**TIM4**、**TIM5**。
   - 这些定时器既可以用于普通定时任务，也可以生成 **PWM** 信号，进行输入捕获、输出比较或计数外部脉冲。
   - 广泛用于定时、计数、PWM 生成等多种场景，功能非常丰富。

3. **高级定时器**（Advanced Timer）
   - 例如 **TIM1** 和 **TIM8**。
   - 这些定时器功能非常强大，支持 **PWM** 生成、死区时间配置、输入捕获、输出比较等，常用于电机控制等高级应用。
   - 它们有更多的输出通道，并且能够产生复杂的波形。

### **TIM（定时器）的核心功能**

1. **基本定时**：
   - 通过定时器可以产生精确的定时或延迟。定时器会根据输入时钟频率、分频系数和计数周期，产生中断或执行特定操作。

2. **PWM 信号生成**：
   - 定时器可以用于生成 **PWM（脉宽调制）** 信号，PWM 是调节输出信号占空比的有效方式，广泛用于 LED 调光、电机调速等场景。
   
3. **输入捕获**：
   - 定时器可以捕获输入引脚的信号变化（如上升沿、下降沿），用于测量输入信号的频率或脉冲宽度。
   - 例如，用于测量外部信号的周期、频率等信息。

4. **输出比较**：
   - 定时器的输出可以与设定的比较值进行比较，当计数器达到设定值时，定时器可以改变输出状态（如产生中断、控制 GPIO 引脚等）。

5. **计数器**：
   - 定时器可以用作计数器，记录外部事件（如脉冲），适合用于编码器、脉冲检测等应用。

6. **中断功能**：
   - 定时器可以设置定时中断，当定时器溢出（达到最大计数值）时，产生中断，通知 CPU 执行特定任务。

7. **死区时间控制（高级定时器）**：
   - 高级定时器支持**死区时间**配置，常用于电机控制。死区时间用于避免在 H 桥驱动电路中上下桥臂同时导通，防止电路短路。

### **TIM 工作原理概述**

定时器的工作主要依赖于以下几个要素：

1. **计数器**：
   - 定时器的核心是 **计数器**，它不断累加或减小计数值。当计数器达到预设值时，可以触发事件（如中断、输出信号切换等）。
   - 计数器的最大值可以根据配置是 8 位、16 位或 32 位。

2. **时钟源和分频器**：
   - 定时器依赖系统时钟或外部时钟作为时间基准。定时器模块通常有一个 **分频器**，可以将输入时钟信号进行分频，以控制计数的速度。例如，输入时钟为 72 MHz，可以通过设置分频器以降低到 1 MHz。
   
3. **自动重载值（ARR）**：
   - 计数器每次计数到 **自动重载值（ARR）** 后，重新从 0 开始计数，这决定了定时器的周期。
   - 通过调整 ARR 和分频器的值，可以精确控制定时周期。

4. **比较值（CCR）**：
   - 在输出比较或 PWM 生成时，定时器中的 **捕获比较寄存器（CCR）** 设定一个比较值，当计数器达到该值时，定时器会执行特定的操作（如切换 GPIO 电平，生成中断等）。

### **STM32 中使用 TIM 的例子**

下面是一个使用 STM32 定时器 **TIM2** 生成定时中断的简单示例。我们将配置 **TIM2** 定时器产生 1 秒的中断，并在中断中切换一个 LED 的状态。

#### **1. 配置定时器**

使用 **STM32CubeMX** 配置 **TIM2** 为定时中断模式，设定时钟频率、分频系数和自动重载值。假设系统时钟为 72 MHz，我们将分频器设置为 7200，ARR 设置为 10000，这样定时器每秒会产生一个中断。

#### **2. 代码示例**

在生成的项目中，编辑 `main.c`，完成 TIM2 的初始化和中断处理函数。

```c
#include "stm32f1xx_hal.h"

void SystemClock_Config(void);
void MX_GPIO_Init(void);
void MX_TIM2_Init(void);

// 定时器句柄
TIM_HandleTypeDef htim2;

int main(void) {
    // 初始化 HAL 库
    HAL_Init();
    
    // 配置系统时钟
    SystemClock_Config();
    
    // 初始化 GPIO 和 TIM2
    MX_GPIO_Init();
    MX_TIM2_Init();
    
    // 启动 TIM2 并使能中断
    HAL_TIM_Base_Start_IT(&htim2);
    
    while (1) {
        // 主循环，空闲等待中断
    }
}

// 初始化 TIM2 定时器
void MX_TIM2_Init(void) {
    __HAL_RCC_TIM2_CLK_ENABLE();  // 启用 TIM2 时钟

    htim2.Instance = TIM2;
    htim2.Init.Prescaler = 7200 - 1;  // 设置分频系数，分频7200
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim2.Init.Period = 10000 - 1;  // 设置自动重载值10000
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    HAL_TIM_Base_Init(&htim2);
    
    // 启用定时器中断
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
}

// 定时器中断服务函数
void TIM2_IRQHandler(void) {
    HAL_TIM_IRQHandler(&htim2);
}

// 定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM2) {
        // 每次 TIM2 溢出中断时，切换 LED 状态
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // 切换 GPIO 状态
    }
}

// GPIO 初始化（用于 LED）
void MX_GPIO_Init(void) {
    __HAL_RCC_GPIOC_CLK_ENABLE();  // 启用 GPIOC 时钟
    
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // 推挽输出模式
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}
```

### **代码解释**

1. **TIM2 定时器初始化**：我们将定时器的分频器设置为 7200，自动重载值设为 10000，这样可以使 TIM2 定时器每 1 秒产生一次中断。
2. **中断处理**：当 TIM2 计数器溢出时，会产生中断，我们在中断服务函数中调用 `HAL_GPIO_TogglePin()` 切换 LED 的状态。

### **TIM 其他高级功能**

#### **1. PWM 信号生成**
通过配置定时器的输出比较模式，可以生成不同频率和占空比的 **PWM** 信号。例如，用于控制 LED 的亮度或调节电机的转速。

#### **2. 输入捕获**
定时器可以配置为捕

获外部信号的输入，用于测量信号的频率或脉冲宽度。常见应用包括频率计、编码器信号读取等。

#### **3. 计数外部脉冲**
定时器可以用于计数外部输入的脉冲信号，适合用在脉冲计数应用中，比如读取旋转编码器的脉冲数。

#### **4. 死区时间配置**
高级定时器（如 TIM1、TIM8）支持 **死区时间** 配置，适合用于电机控制、H 桥驱动等场景，防止电路中的短路。

### **总结**

- **TIM（定时器）** 是 STM32 微控制器中的重要外设，用于处理与时间相关的操作，如定时、计数、PWM 生成和事件捕获等。
- STM32 的定时器有多种类型：基础定时器、通用定时器和高级定时器，支持丰富的功能和应用场景。
- 定时器的核心是通过时钟源、分频器、计数器和比较值来实现精确的时间控制和事件处理。
- **STM32** 的定时器可广泛应用于电机控制、LED 调光、信号捕获、脉冲计数等任务。