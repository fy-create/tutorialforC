---
layout: post
title:  "什么是冯·诺依曼体系结构,什么是哈佛结构,STM32内核采用了哪种结构?"
categories: embed
---

### **冯·诺依曼体系结构**（Von Neumann Architecture）

**冯·诺依曼体系结构** 是现代计算机系统的经典架构，由数学家 **约翰·冯·诺依曼** 提出。这种结构的计算机包含一个统一的存储器，既存储程序，也存储数据，CPU 通过同一个总线访问内存中的指令和数据。这种设计简单且通用，被广泛用于早期的计算机系统。

#### **冯·诺依曼架构的特点**：
1. **统一存储器**：程序代码和数据共享同一存储空间，所有内容都存储在同一个内存中。
2. **单一总线**：CPU 通过一条总线从同一个存储器中取指令和数据，称为**存储器总线**。
3. **数据与指令分时访问**：CPU 需要通过同一条总线读取指令，然后再读取/写入数据。这就意味着读取指令和操作数据的过程不能同时进行，可能会产生“**冯·诺依曼瓶颈**”问题。
4. **灵活性高**：程序和数据都可以动态存储和修改，灵活性较高。

#### **冯·诺依曼瓶颈**：
由于指令和数据都通过相同的总线进行访问，当 CPU 需要同时访问指令和数据时，会发生总线冲突，导致性能下降。这种现象称为“冯·诺依曼瓶颈”，限制了系统的处理速度。

#### **冯·诺依曼架构的应用**：
- 冯·诺依曼结构适用于早期计算机和通用计算系统，包括一些经典的处理器设计。
- 在现代的嵌入式系统中，冯·诺依曼结构仍然有应用，尤其是在低性能、低功耗的系统中。

---

### **哈佛结构**（Harvard Architecture）

**哈佛体系结构** 是一种与冯·诺依曼结构不同的计算机系统架构。它将程序指令和数据存储在两个不同的存储器中，使用独立的总线分别访问指令和数据。由于指令和数据是分开存储的，CPU 可以同时读取指令和数据，从而提升执行效率。

#### **哈佛架构的特点**：
1. **指令存储器和数据存储器分离**：指令和数据存储在不同的存储器中，互不干扰。
2. **独立的总线**：指令和数据有各自独立的总线，CPU 可以并行地访问指令存储器和数据存储器。
3. **更高的效率**：由于指令和数据是独立的，CPU 可以同时取指令和操作数据，从而避免了“冯·诺依曼瓶颈”问题，性能得到提升。
4. **硬件复杂度增加**：哈佛架构需要两套独立的存储器和总线系统，相对增加了硬件复杂性和成本。

#### **哈佛架构的应用**：
- 典型的哈佛架构广泛用于 **数字信号处理器（DSP）** 中，因其需要快速地并行处理数据和指令。
- 许多现代的微控制器也采用了一些哈佛架构的特性，尤其是嵌入式系统中对性能有较高要求的场景。

---

### **STM32内核的架构：修改的哈佛结构**

STM32 系列微控制器基于 **ARM Cortex-M** 内核，而 ARM Cortex-M 系列内核采用的是一种 **修改的哈佛结构**（Modified Harvard Architecture）。这种架构结合了冯·诺依曼结构和哈佛结构的优点，通过多级缓存、独立的指令和数据总线等设计，提升了性能。

#### **修改的哈佛架构的特点**：
1. **分离的指令和数据路径**：
   - 指令和数据存储在不同的区域，允许 CPU 并行地从指令存储器中取指令，同时从数据存储器中读取或写入数据。
   - 这种分离的设计提高了数据吞吐量，减少了因指令和数据共享同一总线带来的冲突。

2. **统一的编址空间**：
   - 尽管采用了分离的指令和数据存储器，修改的哈佛架构依然支持 **统一的地址空间**，这意味着程序可以在同一个地址空间中访问指令和数据，简化了编程和存储管理。
   - 这一特性是对原始哈佛架构的改进，使得系统既有哈佛架构的并行访问优势，又保留了冯·诺依曼结构的编程灵活性。

3. **指令和数据缓存**：
   - ARM Cortex-M 内核采用缓存机制，通过将常用的指令和数据存储在快速缓存中进一步提升了执行效率。

#### **修改的哈佛结构在 STM32 中的优势**：
- **提高性能**：通过独立的指令和数据总线，STM32 中的 Cortex-M 内核可以并行取指令和操作数据，减少了指令和数据访问的瓶颈，提升了运行效率。
- **灵活性和简单性**：虽然具有分离的指令和数据路径，但在编程时不需要开发者显式处理这一分离。STM32 采用的是统一编址，简化了编程复杂性。
- **高效能耗比**：这种架构设计适合嵌入式系统中的低功耗和高性能需求，如物联网设备、消费类电子和工业控制等领域。

---

### **总结**

- **冯·诺依曼架构** 是最早提出的一种计算机系统架构，指令和数据共用同一个存储器和总线，简单但存在总线带宽瓶颈。
- **哈佛架构** 将指令和数据分离到不同的存储器和总线上，从而提高了性能，尤其适用于需要快速处理的场景。
- **STM32** 使用的 **ARM Cortex-M 内核** 采用了 **修改的哈佛结构**，结合了冯·诺依曼和哈佛架构的优点，通过分离指令和数据路径来提升性能，同时保持统一的地址空间来简化开发。

因此，STM32 内核通过这种修改的哈佛架构，达到了在嵌入式系统中追求高性能与低功耗的平衡，使其广泛应用于多种实时性要求较高的应用场景。